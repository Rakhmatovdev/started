B20523F8213


Rahmatov Jasur F82

1
#include <iostream>
#include <ctype.h>
#include <math.h>
#include <ctime>
using namespace std;






2
#include <iostream>
#include <ctype.h>
#include <math.h>
#include <ctime>
using namespace std;






3
#include <iostream>
#include <ctype.h>
#include <math.h>
#include <ctime>
using namespace std;





4
#include <iostream>
#include <ctype.h>
#include <math.h>
#include <ctime>
using namespace std;






5
#include <iostream>
#include <ctype.h>
#include <math.h>
#include <ctime>
using namespace std;






6
#include <iostream>
#include <ctype.h>
#include <math.h>
#include <ctime>
using namespace std;















































































========================================


#include <iostream>
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <string>

using namespace std;



/////////////////222-mashq/////////////////

//Satr berilgan. Satrda uchraydigan barcha “is” satrini “is not” satriga
//almashtiring, lekin “is” satri alifbo harfi ketidan uchrasa, almashtirmang.Natijani
//qaytaring.
//notReplace("is test") → "is not test"
//notReplace("is-is") → "is not-is not"
//notReplace("This is right") → "This is not right"

//string notReplace(string str) {
//  string result = "";
//  for (int i = 0; i < str.length(); i++) {
//    if (str.substr(i, 2) == "is" && (i == 0 || !isalpha(str[i - 1])) && (i + 2 == str.length() || !isalpha(str[i + 2]))) {
//      result += "is not";
//      i++;
//    } else {
//      result += str[i];
//    }
//  }
//  return result;
//}
//
//int main() {
//  string str = "is test";
//  cout << notReplace(str) << endl;
//  return 0;
//}


//////////////////221-mashq/////////////////

//Satr berilgan. Satrdagi barcha uchraydigan sonlar yigindisini toping va
//qaytaring. Son bu raqamlar ketmaketligidir.
//sumNumbers("abc123xyz") → 123
//sumNumbers("aa11b33") → 44
//sumNumbers("7 11") → 18



//int sumNumbers(string str) {
//  int sum = 0;
//  string num = "";
//  for (int i = 0; i < str.length(); i++) {
//    if (isdigit(str[i])) {
//      num += str[i];
//    } else if (num != "") {
//      sum += stoi(num);
//      num = "";
//    }
//  }
//  if (num != "") {
//    sum += stoi(num);
//  }
//  return sum;
//}
//
//int main() {
//  string s = "abc123xyz";
//  cout << sumNumbers(s) << endl;
//  return 0;
//}


////////////////220-mashq//////////////////


//Satr berilgan. Satrdagi eng uzun “blok”ning uzunligini toping va qaytaring.
//“blok” bu satrdagi bir xil belgilar ketma-ketligi.
//maxBlock("hoopla") → 2
//maxBlock("abbCCCddBBBxx") → 3
//maxBlock("") → 0
//maxBlock("xyz") → 1




//int maxBlock(string str) {
//    int maxCount = 0;
//    int count = 1;
//
//    for (int i = 0; i < str.length() - 1; i++) {
//        if (str[i] == str[i+1]) {
//            count++;
//        } else {
//            if (count > maxCount) {
//                maxCount = count;
//            }
//            count = 1;
//        }
//    }
//
//    if (count > maxCount) {
//        maxCount = count;
//    }
//
//    return maxCount;
//}
//
//int main() {
//    string str = "abbCCCddBBBxx";
//    cout << maxBlock(str) << endl;
//    return 0;
//}



//////////////219-mashq/////////////////////

//str satr berilgan. str satrni boshida shunday eng uzun a satr topingki, shu a
//satr str satrning oxirida ham uchrasin. Bunda boshida va oxirida uchragan a
//satrlar ustma-ust tushmasin. Natijani qaytaring.
//sameEnds("abXYab") → "ab"
//sameEnds("yy") → "y"
//sameEnds("zzz") → "z"
//sameEnds("Hello!andHello!") → "Hello!"
//sameEnds("xavaXYZjava") → ""
//sameEnds("ababa") → "a"


//string sameEnds(string str) {
//    string result = "";
//    int length = str.length();
//    for (int i = 0; i < length/2; i++) {
//        if (str.substr(0, i+1) == str.substr(length-i-1, i+1)) {
//            result = str.substr(0, i+1);
//        }
//    }
//    return result;
//}
//
//int main() {
//    string str = "abXYab";
//    string result = sameEnds(str);
//    cout << result << endl;
//    return 0;
//}

/////////////218-mashq//////////////////////

//Satr berilgan. Satrda uchragan barcha raqamlar yigindisini toping va qaytaring.
//sumDigits("aa1bc2d3") → 6
//sumDigits("aa11b33") → 8
//sumDigits("Chocolate") → 0

//int sumDigits(string str) {
//    int sum = 0;
//    for (int i = 0; i < str.length(); i++) {
//        if (isdigit(str[i])) {
//            sum += str[i] - '0';
//        }
//    }
//    return sum;
//}
//
//int main() {
//    string str = "Chocolate";
//    int result = sumDigits(str);
//    cout << result << endl;
//    return 0;
//}
///////////////217-mashq/////////////////////

//Satr berilgan. Agar 1ta belgi satr ketma-ket 3 marta joylashgan bo’lsa, uchlik
//deyiladi. Berilgan satrda barcha uchliklar sonini toping va qaytaring. Bunda
//uchliklar ustma-ust tushishi mumkin.
//countTriple("abcXXXabc") → 1
//countTriple("xxxabyyyycd") → 3
//countTriple("a") → 0

//
//int countTriple(string str) {
//    int count = 0;
//    for (int i = 0; i < str.length() - 2; i++) {
//        if (str[i] == str[i+1] && str[i+1] == str[i+2]) {
//            count++;
//            i += 2;
//        }
//    }
//    return count;
//}
//
//int main() {
//    string str = "abcXXXabc";
//    int result = countTriple(str);
//    cout << result << endl;
//    return 0;
//}

///////////////216-mashq////////////////////

//Satr berilgan. Agar satrda ‘g’ dan oldin yoki keyin ‘g’ bolmasa, ‘g’ belgisiyolg’iz
//deyiladi. Agar satrda yolg’iz ‘g’ uchramasa, true qaytaring.
//gHappy("xxggxx") → true
//gHappy("xxgxx") → false
//gHappy("xxggyygxx") → false
//gHappy("xxgggxyg") → false

//bool gHappy(string str) {
//    for (int i = 0; i < str.length(); i++) {
//        if (str[i] == 'g') {
//            if (i > 0 && str[i-1] == 'g') {
//                continue;
//            }
//            if (i < str.length()-1 && str[i+1] == 'g') {
//                continue;
//            }
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    string str = "xxggxx";
//    bool result = gHappy(str);
//    cout << result << endl;
//    return 0;
//}


///////////////215-mashq//////////////////


//Satr berilgan. Agar satrda barcha “is” lar soni “not” lar soniga teng bolsa,true
//qaytaring.
//equalIsNot("This is not") → false
//equalIsNot("This is notnot") → true
//equalIsNot("noisxxnotyynotxisi") → true

//bool equalIsNot(string str) {
//    int isCount = 0;
//    int notCount = 0;
//    int len = str.length();
//    for (int i = 0; i < len; i++) {
//        if (i <= len - 2 && str.substr(i, 2) == "is") {
//            isCount++;
//        }
//        if (i <= len - 3 && str.substr(i, 3) == "not") {
//            notCount++;
//        }
//    }
//    return isCount == notCount;
//}
//
//int main() {
//    string str = "This is notnot";
//    cout << boolalpha << equalIsNot(str) << endl; // Output: false
//    return 0;
//}



/////////////214-mashq///////////////////

//2ta a va b satrlar berilgan. a satrni ichida barcha b satrlari bolsa, olibtashlang
//va natijani qaytaring.
//withoutString("Hello there", "llo") → "He there"
//withoutString("Hello there", "e") → "Hllo thr"
//withoutString("Hello there", "x") → "Hello there"
//withoutString("abyyyab", "yy") → "abyab"


//string withoutString(string a, string b) {
//    string result = "";
//    int lenA = a.length();
//    int lenB = b.length();
//    for (int i = 0; i < lenA; i++) {
//        if (i <= lenA - lenB && a.substr(i, lenB) == b) {
//            i += lenB - 1;
//        } else {
//            result += a[i];
//        }
//    }
//    return result;
//}
//
//int main() {
//    string a, b;
//    cout << "Iltimos, 2 ta satr kiriting: ";
//    cin >> a >> b;
//    string result = withoutString(a, b);
//    cout << "Yangi satr: " << result << endl;
//    return 0;
//}


//////////////213-mashq///////////////////////

//Satr berilgan. Satrda ‘y’ yoki ‘z’ belgisi bilan tugaydigan so’zlar sonini toping.
//(kata-kichik harf farqi yo’q) Masalan, “heavy” yoki “XYZ” sozlari hisobga olinadi.
//Sozlar ‘y’ yoki ‘z’ bilan tugaydi deymiz, qachonki shulardan keyin alifboharifi
//bolmasa.
//countYZ("fez day") → 2
//countYZ("day fez") → 2
//countYZ("day:yak") → 1
//countYZ("!!day--yaz!!") → 2

//   int countYZ(string str) {
//    int count = 0;
//    int len = str.length();
//    for (int i = 0; i < len; i++) {
//        if ((str[i] == 'y' || str[i] == 'z' || str[i] == 'Y' || str[i] == 'Z') && (i == len - 1 || !isalpha(str[i+1]))) {
//            count++;
//        }
//    }
//    return count;
//}
//
//int main() {
//    string str = "fez day";
//    cout << countYZ(str) << endl; // Output: 2
//    return 0;
//}


///////////////212-mashq///////////////////

//2ta str va word nomli satrlar berilgan. str da uchraydigan baarcha word larni
//1ta oldin va 1ta keyingi belgilarini ketmaket qoyib yangi string hosil qilingva
//natijani qaytaring. word’dan oldin yoki keyin belgi bolmasa etibor qilmang.1ta
//belgi 2marta hisobga olingan holatlar ham bolishi mumkin.
//wordEnds("abcXY123XYijk", "XY") → "c13i"
//wordEnds("XY123XY", "XY") → "13"
//wordEnds("XY1XY", "XY") → "11"

//string wordEnds(string str, string word) {
//    string result = "";
//    int len = word.length();
//    for (int i = 0; i < str.length() - len + 1; i++) {
//        if (str.substr(i, len) == word) {
//            if (i > 0) {
//                result += str[i - 1];
//            }
//            if (i < str.length() - len) {
//                result += str[i + len];
//            }
//        }
//    }
//    return result;
//}
//
//int main() {
//    string str, word;
//    cout << "Iltimos, 2 ta satr kiriting: ";
//    cin >> str >> word;
//    string result = wordEnds(str, word);
//    cout << "Yangi satr: " << result << endl;
//    return 0;
//}




///////////////211-mashq//////////////////


//2ta str va word nomli satrlar berilgan. str satrida barcha uchraydigan word
//lardan tashqari qolgan belgilarni ‘+’ belgisi bilan almashtiring.
//plusOut("12xy34", "xy") → "++xy++"
//plusOut("12xy34", "1") → "1+++++"
//plusOut("12xy34xyabcxy", "xy") → "++xy++xy+++xy"



//string plusOut(string str, string word) {
//    int i = 0;
//    while (i < str.length()) {
//        if (str.substr(i, word.length()) == word) {
//            i += word.length();
//        } else {
//            str.replace(i, 1, "+");
//            i++;
//        }
//    }
//    return str;
//}
//
//int main() {
//    string str = "12xy34";
//    string word = "xy";
//    string result = plusOut(str, word);
//    cout << result;
//    return 0;
//}


//////////////210-mashq///////////////////


//Satr berilgan. Satrda z va p harflarini orasida 1tagina belgi bo’lsa uni tuhshirib
//qoldiring, va yangi satrni qaytaring.
//zipZap("zipXzap") → "zpXzp"
//zipZap("zopzop") → "zpzp"
//zipZap("zzzopzop") → "zzzpzp"


//string zipZap(string str) {
//  string result = "";
//  for (int i = 0; i < str.length(); i++) {
//    if (str[i] == 'z' && str[i+2] == 'p') {
//      result += "zp";
//      i += 2;
//    } else {
//      result += str[i];
//    }
//  }
//  return result;
//}
//
//int main() {
//  string s = "zipXzap";
//  cout << zipZap(s) << endl; // Chiqish: zpXzp
//  return 0;
//}



///////////////209-mashq///////////////

//Satr berilgan. Satrda har 1ta uchragan ‘*’ belgisidan 1ta oldingi va 1ta keyingi
//belgilar teng bo’lsa, true qaytaring. Agar ‘*’dan 1ta oldin yoki 1ta keyinbelgi
//bolmasa e’tibor qilmang.
//sameStarChar("xy*yzz") → true
//sameStarChar("xy*zzz") → false
//sameStarChar("*xa*az") → true


//bool sameStarChar(string str) {
//    for (int i = 1; i < str.length() - 1; i++) {
//        if (str[i] == '*') {
//            if (str[i - 1] != str[i + 1])
//                return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    string str;
//    cout << "Satr kiriting: ";
//    getline(cin, str);
//    cout << "Natija: " << boolalpha << sameStarChar(str) << endl;
//    return 0;
//}





///////////////208-mashq////////////////


//Sandwich bu 2ta nonni orasiga solingan masalliqlar iborat ovqat.
//Satr berilgan. Satrda birinchi uchraydigan va oxirgi uchraydigan “bread” so’zini
//orasidagi satrni qaytaring. Agar satrda 2ta “bread” bo’lmasa bosh string
//qaytaring.
//getSandwich("breadjambread") → "jam"
//getSandwich("xxbreadjambreadyy") → "jam"
//getSandwich("xxbreadyy") → ""

//string getSandwich(string str) {
//    int firstBread = str.find("bread");
//    int lastBread = str.rfind("bread");
//    if (firstBread == lastBread)
//        return "";
//    return str.substr(firstBread + 5, lastBread - firstBread - 5);
//}
//
//int main() {
//    string str;
//    cout << "Satr kiriting: ";
//    getline(cin, str);
//    cout << "Sandwich: " << getSandwich(str) << endl;
//    return 0;
//}




///////////////207-mashq////////////////

//Satr berilgan. Shu satrni o’rtasida “xyz” turgan bo’lsa true qaytaring. Bunda
//“xyz” ni chap tomonidagi va o’ng tomonidagi belgilar soni ko’pi bilan 1taga farq
//qilsa ham satrni o’rtasida turibti deb hisoblansin.
//xyzMiddle("AAxyzBB") → true
//xyzMiddle("AxyzBB") → true
//xyzMiddle("AxyzBBB") → false


//bool xyzMiddle(string str) {
//    int len = str.length();
//    if (len < 3) {
//        return false;
//    }
//    int mid = len / 2;
//    if (len % 2 == 0) {
//        if (str[mid - 1] == 'x' && str[mid] == 'y' && str[mid + 1] == 'z') {
//            return true;
//        }
//    } else {
//        if (str[mid] == 'y') {
//            if (str[mid - 1] == 'x' && str[mid + 1] == 'z') {
//                return true;
//            }
//        }
//    }
//    return false;
//}
//
//int main() {
//    string str = "AAxyzBB";
//    bool result = xyzMiddle(str);
//    cout << boolalpha << result << endl; // true
//    return 0;
//}

//////////////206-mashq///////////////

//Satr va n soni berilgan. agar satrni birinchi n ta harfidan iborat so’z satrni
//boshqa qismida ham uchrasa, true qaytaring, aks holda false.
//prefixAgain("abXYabc", 1) → true
//prefixAgain("abXYabc", 2) → true
//prefixAgain("abXYabc", 3) → false



//bool prefixAgain(string str, int n) {
//  return str.rfind(str.substr(0, n)) !=0;
//}
//
//int main() {
//  string str = "abXYabc";
//  int n = 3;
//  bool result = prefixAgain(str, n);
//  cout << boolalpha << result << endl;
//  return 0;
//}


////////////////205-mashq/////////////


//2ta word va sep nomli satrlar va n soni berilgan. n ta wordni birin ketin
//joylashtiring va orasiga sep satrlarni qoying. Hosil bolgan satrni qaytaring.
//repeatSeparator("Word", "X", 3) → "WordXWordXWord"
//repeatSeparator("This", "And", 2) → "ThisAndThis"
//repeatSeparator("This", "And", 1) → "This"


//string repeatSeparator(string word, string sep, int n) {
//  string result = "";
//  for (int i = 0; i < n; i++) {
//    if (i > 0) {
//      result += sep;
//    }
//    result += word;
//  }
//  return result;
//}
//
//int main() {
//  string word = "Word";
//  string sep = "X";
//  int n = 3;
//  string result = repeatSeparator(word, sep, n);
//  cout << result << endl;
//  return 0;
//}












///////////////204-mashq///////////////

//Str satri va n soni berilgan. str satrini birinchi n ta belgisini davomidan str
//satrini birinchi n-1 ta belgisini va yana davomidan str satrini n-2 ta belgisini …
//joylashtiring. Hosil bolgan yangi satrni qaytaring.
//repeatFront("Chocolate", 4) → "ChocChoChC"
//repeatFront("Chocolate", 3) → "ChoChC"
//repeatFront("Ice Cream", 2) → "IcI"



//string repeatFront(string str, int n) {
//  string result = "";
//  for (int i = n; i >= 0; i--) {
//    result += str.substr(0, i);
//  }
//  return result;
//}
//
//int main() {
//  string str = "Chocolate";
//  int n = 4;
//  string result = repeatFront(str, n);
//  cout << result << endl;
//  return 0;
//}


//////////////203-mashq//////////////


//Satr va n soni berilgan. Shu satrni oxirgi n ta harfini n marta yonmayonqoyib,
//yangi satrni qaytaring.
//repeatEnd("Hello", 3) → "llollollo"
//repeatEnd("Hello", 2) → "lolo"
//repeatEnd("Hello", 1) → "o"


//string repeatEnd(string str, int n) {
//    string natija = "";
//    string soz = str.substr(str.length() - n);
//    for (int i = 0; i < n; i++) {
//        natija += soz;
//    }
//    return natija;
//}
//
//int main() {
//    string str;
//    int n;
//    cout << "Satrni kiriting: ";
//    cin >> str;
//    cout << "n ni kiriting: ";
//    cin >> n;
//
//    string natija = repeatEnd(str, n);
//
//    cout << "Yangi satr: " << natija << endl;
//
//    return 0;
//}



/////////////202-mashq/////////////


//2ta a va b satr berilgan. a satrni 1-harf, b-satrni 1-harfi, a satrni 2-harfi, b
//satrni 2-harfi, …. Shu ketma ketlik boyicha harflardan iborat yangi satrni
//qaytaring. Oxirida a yoki b satrda qolib ketgan harflar hammasi yangi satrga
//qoshib yuboriladi.
//mixString("abc", "xyz") → "axbycz"abc
//mixString("Hi", "There") → "HTihere"
//mixString("xxxx", "There") → "xTxhxexre"


//string mixString(string a, string b) {
//    string natija = "";
//    int uzunlik = min(a.length(), b.length());
//    for (int i = 0; i < uzunlik; i++) {
//        natija += a[i];
//        natija += b[i];
//    }
//    if (a.length() > b.length()) {
//        natija += a.substr(b.length());
//    } else if (b.length() > a.length()) {
//        natija += b.substr(a.length());
//    }
//    return natija;
//}
//
//int main() {
//    string a, b;
//    cout << "1-satrni kiriting: ";
//    cin >> a;
//    cout << "2-satrni kiriting: ";
//    cin >> b;
//
//    string natija = mixString(a, b);
//
//    cout << "Yangi satr: " << natija << endl;
//
//    return 0;
//}


/////////////201-mashq////////////////


//Satr berilgan. agar shu satr “xyz” so’zini o’z ichiga olsa,
//true qaytaring, lekin nuqta(.) belgisi davomidan “xyz” uchrasa hisobga olinmasin.
//xyzThere("abcxyz") → true
//xyzThere("abc.xyz") → false
//xyzThere("xyz.abc") → true
//xyzThere("abc.xyzxyz") → true


//bool xyzThere(string str) {
//  for (int i = 0; i < str.length(); i++) {
//    if (str[i] == 'x' && str[i+1] == 'y' && str[i+2] == 'z') {
//      if (i == 0 || str[i-1] != '.') {
//        return true;
//      }
//    }
//  }
//  return false;
//}
//
//int main() {
//  cout << xyzThere("abc.xyzxyz") << endl; // true
//  cout << xyzThere("xyz.abc") << endl; // false
//  cout << xyzThere("xyz") << endl; // true
//  cout << xyzThere("xy.z") << endl; // false
//}



//////////////200-mashq//////////////

//2ta a va b satr berilgan. shu satrlardan biri ikkinchisi bilan tugasa, true
//qaytaring. bunda katta-kichik harflar farqlanmaydi.
//endOther("Hiabc", "abc") → true
//endOther("AbC", "HiaBc") → true
//endOther("abc", "abXabc") → true



//bool endOther(string a, string b) {
//    int aLength = a.length();
//    int bLength = b.length();
//
//    if (aLength < bLength) {
//        string temp = a;
//        a = b;
//        b = temp;
//    }
//
//    string endOfA = a.substr(aLength - bLength);
//    string endOfB = b;
//
//    for (int i = 0; i < bLength; i++) {
//        endOfB[i] = tolower(endOfB[i]);
//    }
//
//    for (int i = 0; i < bLength; i++) {
//        if (tolower(endOfA[i]) != endOfB[i]) {
//            return false;
//        }
//    }
//
//    return true;
//}
//
//int main() {
//    string a = "Hiabc";
//    string b = "abc";
//    bool result = endOther(a, b);
//    cout << boolalpha << result << endl;
//    return 0;
//}






///////////////199-mashq///////////////


//Satr berilgan. Satrda “code” so’zi necha marta borligini qaytaring. faqat
//“code” so’zidagi d harfi o’rnida ixtiyoriy harf bo’lishi mumkin. “cope” yoki
//“cooe”.
//countCode("aaacodebbb") → 1
//countCode("codexxcode") → 2
//countCode("cozexxcope") → 2


//int countCode(string str) {
//    int count = 0;
//    for (int i = 0; i < str.length() - 3; i++) {
//        if (str.substr(i, 2) == "co" && str[i + 3] == 'e') {
//            count++;
//        }
//    }
//    return count;
//}
//
//int main() {
//    string s = "codexxcode";
//    cout << countCode(s) << endl; // Output: 2
//    return 0;
//}


/////////////198-mashq//////////////

//Satr berilgan. Shu satrda “cat” va “dog” so’zlari teng miqdorda uchrasa, true
//qaytaring.
//catDog("catdog") → true
//catDog("catcat") → false
//catDog("1cat1cadodog") → true


//bool catDog(string str) {
//    int catCount = 0;
//    int dogCount = 0;
//
//    for (int i = 0; i < str.length() - 2; i++) {
//        if (str.substr(i, 3) == "cat") {
//            catCount++;
//        } else if (str.substr(i, 3) == "dog") {
//            dogCount++;
//        }
//    }
//
//    return catCount == dogCount;
//}
//
//int main() {
//    string inputStr = "catdog";
//    bool result = catDog(inputStr);
//    cout << boolalpha << result << endl;
//    return 0;
//}


//bool catDog(string str) {
//    int catCount = 0;
//    int dogCount = 0;
//
//    for (int i = 0; i < str.length() - 2; i++) {
//        if (str.substr(i, 3) == "cat") {
//            catCount++;
//        } else if (str.substr(i, 3) == "dog") {
//            dogCount++;
//        }
//    }
//
//    return catCount == dogCount;
//}
//
//int main() {
//    cout << boolalpha << catDog("catdog") << endl; // true
//    cout << boolalpha << catDog("catcatdog") << endl; // false
//    cout << boolalpha << catDog("catdogdogcat") << endl; // true
//
//    return 0;
//}






//////////////197-mashq///////////////


//Satr berilgan. Agar satrni birinchi yoki oxirgi belgisi ‘x’ bolsa, shu ‘x’larni olib
//tashlab, satrni qaytaring, aks holda satrni o’zini qaytaring.
//withoutX("xHix") → "Hi"
//withoutX("xHi") → "Hi"
//withoutX("Hxix") → "Hxi"


//string withoutX(string str) {
//    int len = str.length();
//    if(len > 0 && str[0] == 'x') {
//        str = str.substr(1);
//        len--;
//    }
//    if(len > 0 && str[len - 1] == 'x') {
//        str = str.substr(0, len - 1);
//    }
//    return str;
//}
//
//int main() {
//    string str = "Hxix";
//    cout << withoutX(str) << endl;
//    return 0;
//}






//////////////196-mashq/////////////

//Satr berilgan. Satrni boshidagi 2ta belgisini olib tashlang, lekin birinchi belgi‘a’
//bolsa, qoldiring, ikkinchi belgi ‘b’ bolsa, buni ham qoldiring. Natijani qaytaring.
//deFront("Hello") → "llo"
//deFront("java") → "va"
//deFront("away") → "aay"


//string deFront(string str) {
//    string result = "";
//    int len = str.length();
//    if(len > 0 && str[0] == 'a') {
//        result += 'a';
//    }
//    if(len > 1 && str[1] == 'b') {
//        result += 'b';
//    }
//    if(len > 2) {
//        result += str.substr(2);
//    }
//    return result;
//}
//
//int main() {
//    string str = "Hello";
//    cout << deFront(str) << endl;
//    return 0;
//}


//////////////195-mashq//////////////

//2ta a va b satr berilgan. Katta satrni oxirini kichik satr uzunligicha qoldiringva
//yakunda ikkita bir xil uzunlikdagi satrlarni qoshib qaytaring. Agar satrlar uzunligi
//teng bolsa, oddiygina shularni qoshib qaytaring.
//minCat("Hello", "Hi") → "loHi"
//minCat("Hello", "java") → "ellojava"
//minCat("java", "Hello") → "javaello"



//string minCat(string a, string b) {
//    int a_len = a.length(), b_len = b.length();
//    if(a_len > b_len) {
//        return a.substr(a_len - b_len) + b;
//    } else if(b_len > a_len) {
//        return a + b.substr(b_len - a_len);
//    } else {
//        return a + b;
//    }
//}
//
//int main() {
//    string a = "Hello", b = "Hi";
//    cout << minCat(a, b) << endl;
//    return 0;
//}





/////////////194-mashq//////////////

//Satr berilgan. Agar satrni oxiri satrni birinchi 2ta belgisi bilan tugasa, true
//qaytaring.
//frontAgain("edited") → true
//frontAgain("edit") → false
//frontAgain("ed") → true


//bool frontAgain(string str) {
//  int len = str.length();
//
//  if (len < 2) {
//    return false;
//  }
//
//  string firstTwo = str.substr(0, 2);
//  string lastTwo = str.substr(len - 2, 2);
//
//  return firstTwo == lastTwo;
//}
//
//int main() {
//  string s = "edited";
//  cout << boolalpha << frontAgain(s) << endl; // prints "1" (true)
//  return 0;
//}

//////////////193-mashq//////////////

//Satr berilgan. Agar satr “red” yoki “blue” bilan boshlansa, shu rangni
//qaytaring. aks holda bosh stringni qaytaring.
//seeColor("redxx") → "red"
//seeColor("xxred") → ""
//seeColor("blueTimes") → "blue"



//string seeColor(string str) {
//  string color = "";
//
//  if (str.substr(0, 3) == "red") {
//    color = "red";
//  } else if (str.substr(0, 4) == "blue") {
//    color = "blue";
//  }
//
//  return color;
//}
//
//int main() {
//  string s = "redxx";
//  cout << seeColor(s) << endl; // prints "red"
//  return 0;
//}



///////////////192-mashq/////////////


//Satr berilgan. Satrni oxirgi 2ta harfini almashtirgan holda natijani qaytaring.
//lastTwo("coding") → "codign"
//lastTwo("cat") → "cta"
//lastTwo("ab") → "ba"


//string lastTwo(string str) {
//  int len = str.length();
//
//  if (len < 2) {
//    return str;
//  }
//
//  char last = str[len - 1];
//  char secondLast = str[len - 2];
//
//  if (last == secondLast) {
//    return str.substr(0, len - 2) + last;
//  } else {
//    return str.substr(0, len - 2) + last + secondLast;
//  }
//}
//
//int main() {
//  string s = "coding";
//  cout << lastTwo(s) << endl; // prints "codign"
//  return 0;
//}




/////////////191-mashq///////////////

//2ta a va b satrlar berilgan. a satr davomidan b satrni qoyib natijani qaytaring.
//Agar a satrni oxirgi belgisi b satrni 1-belgisi bilan bir xil bolsa, bubelgilarni 1tasini
//hisobga oling.
//conCat("abc", "cat") → "abcat"
//conCat("dog", "cat") → "dogcat"
//conCat("abc", "") → "abc"


//string conCat(string a, string b) {
//  if (a.length() > 0 && b.length() > 0 && a[a.length() - 1] == b[0]) {
//    return a + b.substr(1);
//  } else {
//    return a + b;
//  }
//}
//
//int main() {
//  string a = "abc";
//  string b = "cat";
//  cout << conCat(a, b) << endl; // abcat
//
//  a = "abc";
//  b = "cath";
//  cout << conCat(a, b) << endl; // abccath
//
//  return 0;
//}



/////////////190-mashq//////////////

//Toq uzunlikdagi satr berilgan. Satrni o’rtasidagi 3ta harfdan iborat yangisatrni
//qaytaring.
//middleThree("Candy") → "and"
//middleThree("and") → "and"
//middleThree("solving") → "lvi"


//string middleThree(string str) {
//    int mid = str.length() / 2;
//    return str.substr(mid - 1, 3);
//}
//
//int main() {
//    string s = "and";
//    cout << middleThree(s) << endl; // and
//    return 0;
//}




//////////////189-mashq///////////////


//Satr va n soni berilgan. Satrni birinchi n ta harfi va oxirgi n ta harfidan iborat
//yangi satrni qaytaring.
//nTwice("Hello", 2) → "Helo"
//nTwice("Chocolate", 3) → "Choate"
//nTwice("Chocolate", 1) → "Ce"


//string nTwice(string str, int n) {
//    string newStr = "";
//    if (n > 0 && n <= str.length()) {
//        newStr += str.substr(0, n);
//        newStr += str.substr(str.length() - n, n);
//    }
//    return newStr;
//}
//
//int main() {
//    string s = "Hello";
//    int n = 2;
//    cout << "Original String: " << s << endl;
//    cout << "nTwice String: " << nTwice(s, n) << endl;
//    return 0;
//}



//////////////188-mashq///////////////

//Satr va Boolean tipidagi front nomli o’zgaruvchi berilgan. Agar front – true
//bo’lsa,satrni birinchi harfini, front – false bo’lsa, satrni oxirgi harfini qaytaring.
//theEnd("Hello", true) → "H"
//theEnd("Hello", false) → "o"
//theEnd("oh", true) → "o"

//string theEnd(string str, bool front) {
//  if (front) {
//    return str.substr(0, 1);
//  } else {
//    return str.substr(str.length() - 1);
//  }
//}
//
//int main() {
//  string str = "Hello";
//  bool front = true;
//  cout << theEnd(str, front) << endl; // H
//
//  front = false;
//  cout << theEnd(str, front) << endl; // o
//
//  return 0;
//}



/////////////187-mashq/////////////////

//Satr berilgan. Satrni birinchi 2ta harfini olib, davomiga qo’yib, natijani
//qaytaring.
//left2("Hello") → "lloHe"
//left2("java") → "vaja"
//left2("Hi") → "iH"

//string left2(string str) {
//  if (str.length() <= 2) {
//    return str;
//  }
//  string firstTwoChars = str.substr(0, 2);
//  string remainingChars = str.substr(2);
//  return remainingChars + firstTwoChars;
//}
//
//int main() {
//  string str = "Hello";
//  cout << left2(str) << endl; // lloHe
//  return 0;
//}




///////////////186-mashq///////////////


//Uzunligi kamida 1ga teng bo’lgan 2ta satr berilgan. Ushbu satrlarni 1-
//harflarini hisobga olmasdan, satrlarni qo’shib natijani qaytaring.
//nonStart("Hello", "There") → "ellohere"
//nonStart("java", "code") → "avaode"
//nonStart("shotl", "java") → "hotlava"


//string nonStart(string a, string b) {
//  return a.substr(1) + b.substr(1);
//}
//
//int main() {
//  cout << nonStart("Hello", "There") << endl; // "ellohere"
//  cout << nonStart("java", "code") << endl; // "avaode"
//  cout << nonStart("shotl", "cake") << endl; // "hotlake"
//  return 0;
//}





///////////////185-mashq////////////////

//2ta a va b satrlar berilgan. Shu satrlarni eng kichik uzunlikdagisi short, eng
//uzuni long bo’lsin. short+long+short korinishda natijani qaytaring.
//comboString("Hello", "hi") → "hiHellohi"
//comboString("hi", "Hello") → "hiHellohi"
//comboString("aaa", "b") → "baaab"



//string comboString(string a, string b) {
//  string shortStr, longStr;
//  if (a.length() < b.length()) {
//    shortStr = a;
//    longStr = b;
//  } else {
//    shortStr = b;
//    longStr = a;
//  }
//  return shortStr + longStr + shortStr;
//}
//
//int main() {
//  cout << comboString("Hello", "hi") << endl; // "hiHellohi"
//  cout << comboString("aaa", "b") << endl; // "baaab"
//  cout << comboString("cat", "doggy") << endl; // "catdogcat"
//  return 0;
//}






//////////////184-mashq/////////////////


//Kamida 2ta harfdan iborat satr berilgan. Shu satrni boshidagi va oxiridagi
//harflarisiz natijani qaytaring.
//withoutEnd("Hello") → "ell"
//withoutEnd("java") → "av"
//withoutEnd("coding") → "odin"



//string withoutEnd(string str) {
//  return str.substr(1, str.length()-2);
//}
//
//int main() {
//  cout << withoutEnd("Hello") << endl; // "ell"
//  cout << withoutEnd("abcdefg") << endl; // "bcdef"
//  cout << withoutEnd("ab") << endl; // ""
//  return 0;
//}


//////////////183-mashq////////////////////


//Juft uzunlikdagi satr berilgan. Shu satrni birinchi yarmini qaytaring.
//firstHalf("WooHoo") → "Woo"
//firstHalf("HelloThere") → "Hello"
//firstHalf("abcdef") → "abc"


//string firstHalf(string str) {
//  return str.substr(0, str.length()/2);
//}
//
//int main() {
//  cout << firstHalf("WooHoo") << endl; // "Woo"
//  cout << firstHalf("HelloThere") << endl; // "Hello"
//  cout << firstHalf("abcdef") << endl; // "abc"
//  return 0;
//}









////////////////182-mashq///////////////


//Satr berilgan. Ushbu satrni birinchi 2ta harfini returnga qaytaring. Agar satr
//uzunligi 2dan kichik bolsa, osha satrni ozini qaytaring.
//firstTwo("Hello") → "He"
//firstTwo("abcdefg") → "ab"
//firstTwo("ab") → "ab"



//string firstTwo(string str) {
//  if (str.size() >= 2) {
//    return str.substr(0, 2);
//  }
//  return str;
//}
//
//int main() {
//  string str;
//  cout << "Satr kiriting: ";
//  cin >> str;
//
//  cout << firstTwo(str) << endl;
//
//  return 0;
//}


////////////////181-mashq////////////////


//Uzunligi kamida 2ga teng bolgan satr berilgan. Shu satrni oxirgi 2ta harfini 3
//marta yonma-yon qilib natijani qaytaring.
//extraEnd("Hello") → "lololo"
//extraEnd("ab") → "ababab"
//extraEnd("Hi") → "HiHiHi"



//string extraEnd(string str) {
//  string lastTwo = str.substr(str.size() - 2);
//  return lastTwo + lastTwo + lastTwo;
//}
//
//int main() {
//  string str;
//  cout << "Satr kiriting: ";
//  cin >> str;
//
//  cout << extraEnd(str) << endl;
//
//  return 0;
//}


////////////////180-mashq/////////////////

//2ta a va b satr berilgan. a satr uzunligi 4ga tengligi malum. a satrni 2 va 3-
//harflari o’rtasiga b satrni joylashtirib natijani qaytaring.
//makeOutWord("<<>>", "Yay") → "<<Yay>>"
//makeOutWord("<<>>", "WooHoo") → "<<WooHoo>>"
//makeOutWord("[[]]", "word") → "[[word]]"


//string makeOutWord(string out, string word) {
//  return out.substr(0, 2) + word + out.substr(2);
//}
//
//int main() {
//  string out, word;
//  cout << "Birinchi so'z: ";
//  cin >> out;
//  cout << "Ikkinchi so'z: ";
//  cin >> word;
//
//
//  cout << makeOutWord(out, word) << endl;
//
//  return 0;
//}



/////////////////179-mashq////////////////


//Ikkita a va b satr berilgan. Natijani abba ketma-ketlikda qaytaring. Masalan,
//“Hi” va “Bye” satrlar bolsa, natija “HiByeByeHi” bolsin.
//makeAbba("Hi", "Bye") → "HiByeByeHi"
//makeAbba("Yo", "Alice") → "YoAliceAliceYo"
//makeAbba("What", "Up") → "WhatUpUpWhat"

//string makeAbba(string a, string b) {
//  return a + b + b + a;
//}
//
//int main() {
//  string a, b;
//  cout << "Birinchi so'z: ";
//  cin >> a;
//  cout << "Ikkinchi so'z: ";
//  cin >> b;
//
//  cout << makeAbba(a, b) << endl;
//
//  return 0;
//}



////////////////178-mashq/////////////////

//Name nomli satr berilgan, masalan “Aziz”, ushbu korinishda natijani
//qaytaring(return qiling): “Hello Aziz!”.
//helloName("Bob") → "Hello Bob!"
//helloName("Alice") → "Hello Alice!"
//helloName("X") → "Hello X!"


//string helloName(string name) {
//  return "Hello " + name + "!";
//}
//
//int main() {
//  string name;
//  cout << "Ismni kiriting: ";
//  cin >> name;
//
//  cout << helloName(name) << endl;
//
//  return 0;
//}





///////////////177-mashq////////////////


//Satr berilgan satrdagi barcha ‘ ’(probel)larni “probel” so’zi bilanalmashtiruvchi
//dastur tuzing.
//Input: Salom men darsga keldim.
//Output: Salomprobelmenprobeldarsgaprobelkeldim.


//string replace_spaces(string s) {
//    string result = "";
//    for (int i = 0; i < s.length(); i++) {
//        if (s[i] == ' ') {
//            result += "probel";
//        } else {
//            result += s[i];
//        }
//    }
//    return result;
//}
//
//int main() {
//    string s = "Salom men darsga keldim.";
//    string result = replace_spaces(s);
//    cout << result << endl;
//    return 0;
//}


////////////////176-mashq////////////////


//Berilgan s1 satrning boshidagi n ta va oxiridagi m ta belgidan tashkil topgan
//yangi satr hosil qiluvchi prosedura tuzing



//string replace_chars(string s, int n, int m) {
//    string result = "";
//    if (n + m > s.length()) {
//        return s;
//    }
//    result += s.substr(0, n);
//    result += s.substr(s.length()-m, m);
//    return result;
//}
//
//int main() {
//    string s = "programming";
//    int n = 3;
//    int m = 4;
//    string result = replace_chars(s, n, m);
//    cout << result << endl;
//    return 0;
//}




////////////////175-mashq/////////////////


//Parametr sifatida s satr va n soni qabul qiluvchi, s satrdagi barcha belgilarnin
//martadan orttirib yangi satrga o’zlashtiruvchi, shu satrni natija sifatida
//qaytaruvchi funsiya tuzing.
//Input: s = “c++”; n = 3 Output: “ccc++++++”;



//string martadan_orttir(string s, int n) {
//    string natija = "";
//    for (int i = 0; i < s.length(); i++) {
//        char belgi = s[i];
//        for (int j = 0; j < n; j++) {
//            natija += belgi;
//        }
//    }
//    return natija;
//}
//
//int main() {
//    string s;
//    int n;
//    cout << "Satrni kiriting: ";
//    getline(cin, s);
//    cout << "Sonni kiriting: ";
//    cin >> n;
//
//    string yangi_satr = martadan_orttir(s, n);
//
//    cout << "Yangi satr: " << yangi_satr << endl;
//
//    return 0;
//}



////////////////174-mashq///////////////


//Berilgan s1 satrdagi yonma – yon joylashgan “th” belgilarini o’chiruvchi
//prosedura tuzing.


//string remove_th(string s) {
//    for (int i = 0; i < s.length(); i++) {
//        if (s[i] == 't' && s[i+1] == 'h') {
//            s.replace(i, 2, "");
//        }
//    }
//    return s;
//}
//
//int main() {
//    string s1 = "mathematics";
//    cout << remove_th(s1) << endl;
//
//    string s2 = "thonkful";
//    cout << remove_th(s2) << endl;
//
//    string s3 = "python";
//    cout << remove_th(s3) << endl;
//
//    return 0;
//}





//////////////173-mashq///////////////


//Berilgan s1 satrdagi ‘x’ belgisini “ks” bilan almashtiruvchi proseduratuzing.

//void replaceX(char s1[]) {
//    int i=0;
//    while(s1[i]) {
//        if(s1[i] == 'x') {
//            s1[i] = 'k';
//            int j = strlen(s1);
//            while(j >= i+1) {
//                s1[j+1] = s1[j];
//                j--;
//            }
//            s1[i+1] = 's';
//        }
//        i++;
//    }
//}
//
//int main() {
//    char s1[100];
//    cout << "Enter a string: ";
//    cin.getline(s1, 100);
//    replaceX(s1);
//    cout << "String with replaced 'x': " << s1 << endl;
//    return 0;
//}

//void replaceX(string& str) {
//    for (int i = 0; i < str.length(); i++) {
//        if (str[i] == 'x') {
//            str.replace(i, 1, "ks"); // belgi almashtirish
//            i++; // i o'zgaruvchisini 2 ga oshirish
//        }
//    }
//}
//
//int main() {
//    string s1 = "xerox box";
//
//    replaceX(s1);
//
//    cout << s1 << endl;
//
//    return 0;
//}









///////////////172-mashq/////////////


//Berilgan s1 satrdagi ‘q’ belgisidan keyin ‘u’ belgisini qo’shuvchi prosedura
//tuzing.


//void addU(char s1[]) {
//    int i=0;
//    while(s1[i]) {
//        if(s1[i] == 'q') {
//            int j = strlen(s1);
//            while(j >= i) {
//                s1[j+1] = s1[j];
//                j--;
//            }
//            s1[i+1] = 'u';
//            break;
//        }
//        i++;
//    }
//}
//
//int main() {
//    char s1[100];
//    cout << "Enter a string: ";
//    cin.getline(s1, 100);
//    addU(s1);
//    cout << "String with added 'u': " << s1 << endl;
//    return 0;
//}




///////////////171-mashq//////////////

//Berilgan s1 satrdagi barcha belgilar 2 martadan orttirib chop qiluvchiprosedura
//tuzing.


//void removeDuplicates(char s1[]) {
//    int i=0, j=0;
//    while(s1[i]) {
//        if(s1[i] != s1[i+1]) {
//            s1[j] = s1[i];
//            j++;
//        }
//        i++;
//    }
//    s1[j] = '\0';
//}
//
//int main() {
//    char s1[100];
//    cout << "Enter a string: ";
//    cin.getline(s1, 100);
//    removeDuplicates(s1);
//    cout << "String without duplicates: " << s1 << endl;
//    return 0;
//}

////////////////170-mashq///////////////



//void removeSpaces(char s1[]) {
//    int i=0, j=0;
//    while(s1[i]) {
//        if(s1[i] != ' ') {
//            s1[j] = s1[i];
//            j++;
//        }
//        i++;
//    }
//    s1[j] = '\0';
//}
//
//int main() {
//    char s1[100];
//    cout << "Enter a string: ";
//    cin.getline(s1, 100);
//    removeSpaces(s1);
//    cout << "String without spaces: " << s1 << endl;
//    return 0;
//}








///////////////169-mashq//////////////////

//Foydalanuvchi tomonidan kiritilgan str satrdagi toq indeksdagi belgilar chop
//etuvchi prosedura tuzilsin.

//void printOddChar(string str) {
//    if (str.length() % 2 == 0) { // Agar satrning uzunligi juft bo'lsa
//        cout << "Satrning uzunligi juft son" << endl;
//        return; // funksiyani tugatish
//    }
//
//    for (int i = 0; i < str.length(); i += 2) { // toq indeksdagi belgilarni chop etish
//        cout << str[i] << " ";
//    }
//    cout << endl;
//}
//
//int main() {
//    string str = "Hello World";
//
//    printOddChar(str);
//
//    return 0;
//}




/////////////168-mashq///////////////////


//Klaviaturadan kiritilgan s1 va s2 matndagi harflar faqat katta kichikligi bilan
//farq qilsa bu so‘zlar teng, aks holda so‘zlar teng emas deb xabar chop etuvchi
//protsedura tuzing.
//Input:                                           Output:
//s1=«HEllo WorLD» s2=«hello world»             “so‘zlar teng”
//s1=«coding» s2=«coder»                        “so‘zlar teng emas”


//void compareStrings(char s1[], char s2[]) {
//    int len1 = strlen(s1);
//    int len2 = strlen(s2);
//    if(len1 != len2) {
//        cout << "so'zlar teng emas" << endl;
//        return;
//    }
//    for(int i=0; i<len1; i++) {
//        if(s1[i] >= 'A' && s1[i] <= 'Z') {
//            s1[i] += 32;
//        }
//        if(s2[i] >= 'A' && s2[i] <= 'Z') {
//            s2[i] += 32;
//        }
//        if(s1[i] != s2[i]) {
//            cout << "so'zlar teng emas" << endl;
//            return;
//        }
//    }
//    cout << "so'zlar teng" << endl;
//}
//
//int main() {
//    char s1[100], s2[100];
//    cout << "s1="; cin.getline(s1, 100);
//    cout << "s2="; cin.getline(s2, 100);
//    compareStrings(s1, s2);
//    return 0;
//}



////////////////167-MASHQ//////////////////


//Berilgan str satrdan raqamlar yig’indisini ekranga chiqaradigan funksiya tuzing
//Input: Output:
//Str = ”pdp2022foundation” 6
//Str = ”+2/fff*8+cc45f” 19



//int getSumOfDigits(string str)
//{
//    int sum = 0;
//    for (int i = 0; i < str.length(); i++)
//    {
//        if (isdigit(str[i]))
//        {
//            sum += str[i] - '0';
//        }
//    }
//
//    return sum;
//}
//
//int main()
//{
//    string str = "pdp2022foundation";
//    int sum = getSumOfDigits(str);
//    cout<<"Raqamlar yig'indisi: "<< sum << endl;
//
//    return 0;
//}


//////////////166-mashq/////////////

//Berilgan str satrdagi birinchi va oxirgi belgini ekranga chiqaruvchi funksiya
//tuzing.
//Input:                               Output:
//str=”as*855d+-dfA”                   ”aA”
//str=”+++df47df”                      ”+f”
//str=”--sdf554yj0-9))(”               ”-(”




//void firstAndLastChar(string str) {
//    char first = str[0]; // birinchi belgi
//    char last = str[str.length() - 1]; // oxirgi belgi
//    cout << first << last << endl; // belgilarni ekranga chiqaramiz
//}
//
//int main() {
//    string str = "as/*855d+-dfA";
//    firstAndLastChar(str);
//    return 0;
//}


//string getFirstAndLastChar(string str) {
//    string result = "";
//    result += str[0];
//    result += str[str.length() - 1];
//
//    return result;
//}
//
//int main() {
//    string str = "as/*855d+-dfA";
//    string firstLastChar = getFirstAndLastChar(str);
//    cout << "Birinchi va oxirgi belgi: " << firstLastChar << endl;
//
//    return 0;
//}




/////////////165-mashq///////////////


//Bеrilgan str satrda 5 raqami necha marta qatnashganini topadigan funksiya
//tuzing.
//Input:                                          Output:
//Str = ”salom F-5 guruhi”                          1
//Str = ”13553”                                     2


//int count_occurrences(string s, char c) {
//    int count = 0;
//
//    for (int i = 0; i < s.length(); i++) {
//        if (s[i] == c) {
//            count++;
//        }
//    }
//
//    return count;
//}
//
//int main() {
//    string s;
//    cout << "Satrni kiriting: ";
//    cin >> s;
//    char c = '5';
//
//    int count = count_occurrences(s, c);
//
//    cout << "Satrdagi 5 raqami soni: "<< count << endl;
//
//    return 0;
//}



/////////////164-mashq/////////////////


//Str satr berilgan. Agar shu satrdagi katta harflarlarni o’chirib qaytaruvchi
//funksiya tuzing.
//Input:                      Output:
//Str = “FOunDATiOn”           unin


//string removeCapitalLetters(string str) {
//    string result = "";
//    for(int i = 0; i < str.length(); i++) {
//        if(str[i] >= 'a' && str[i] <= 'z') {
//            result += str[i];
//        }
//    }
//    return result;
//}
//
//int main() {
//    string str = "FOunDATiOn";
//    string result = removeCapitalLetters(str);
//    cout << result << endl;
//    return 0;
//}




///////////////163-mashq////////////////////

//Satrdagi barcha katta harflarni ‘*’ ga almashtirib natijani qaytaruvchi funksiya
//tuzing.

//string changeToUpper(string input) {
//    string output = "";
//    for(int i = 0; i < input.length(); i++) {
//        if(input[i] >= 'A' && input[i] <= 'Z') {
//            output += '*';
//        } else {
//            output += input[i];
//        }
//    }
//    return output;
//}
//
//int main() {
//
//    string inputString;
//    cout << "Enter a string: ";
//    getline(cin, inputString);
//
//    string result = changeToUpper(inputString);
//
//    cout << "Result: " << result << endl;
//
//    return 0;
//}

/////////////////162-mashq///////////////////

//Str satr berilgan. Shu satr birinchi belgisi bilan oxirgi belgisini almashtirib
//qaytaradigan funksiya tuzing.
//Input:                        Output:
//Str = “omad”                  “dmao”
//Str = “salom”                 “malos”

//string swapFirstLast(string str) {
//   if (str.length() == 0) {
//      return str;
//   }
//
//   char temp = str[0];
//
//   str[0] = str[str.length() - 1];
//
//   str[str.length() - 1] = temp;
//
//   return str;
//}
//
//int main() {
//   string Str = "omad";
//
//   cout << swapFirstLast(Str) << endl; // dmao
//
//   return 0;
//}



////////////////161-mashq//////////////////

//Str satr berilgan. (Str.length() >= 6) ma’lum bo’lsa. Str satrini boshidan 2 ta
//oxiridan 4 belgini o’chirib qaytaruvchi funksiya tuzing.
//Input:                         Output:
//Str = “hammagaOmad”            “mmaga”
//Str = “11salom2222”            “salom”


//string removeChars(string str) {
//    if (str.length() >= 6) {
//        return str.substr(2, str.length() - 6);
//    }
//    return str;
//}
//
//int main() {
//    string str = "11salom2222";
//    cout << removeChars(str) << endl; // Output: "mmaga"
//    return 0;
//}



/////////////////160-mashq////////////////

//Berilgan str satrdagi sonlarni kvadratlari yig’indisini qaytaradigan
//digitSquare(str) funksiyasini hosil qiling.
//Input:                              Output:
//Str = “foundation F-35”               34
//Str = “bu masala 20 ball beradi”      4
//Str = “imtihonda ko’chirmang”         0


//int digitSquare(string str) {
//    int sum = 0;
//    for (int i = 0; i < str.length(); i++) {
//        if (isdigit(str[i])) {
//            int digit = str[i] - '0';
//            sum += digit * digit;
//        }
//    }
//    return sum;
//}
//
//int main() {
//    string str = "foundation F-35";
//    cout << digitSquare(str) << endl; // Output: 34
//    return 0;
//}




///////////////159-mashq////////////////

//Parametr sifatida 3 ta son berilsa ham, 4 ta son berilsa ham ularning kattasini
//topib, natijani qaytaruvchi findMax() funksiyasini “function overloading”
//yordamida yozing.
//Input:                          Output:
//findMax (-20,30,15)               30
//findMax (40,-60,80,-65)           80

//int findMax(int a, int b, int c) {
//    int max = a;
//    if (b > max) {
//        max = b;
//    }
//    if (c > max) {
//        max = c;
//    }
//    return max;
//}
//
//int findMax(int a, int b, int c, int d) {
//    int max = a;
//    if (b > max) {
//        max = b;
//    }
//    if (c > max) {
//        max = c;
//    }
//    if (d > max) {
//        max = d;
//    }
//    return max;
//}
//
//int main() {
//    int max1 = findMax(-20, 30, 15);
//    int max2 = findMax(-20, 30, 15, 40);
//    cout << "Max of (-20, 30, 15): " << max1 << endl; // Output: 30
//    cout << "Max of (-20, 30, 15, 40): " << max2 << endl; // Output: 40
//    return 0;
//}





//////////////158-mashq////////////////

//Berilgan satrda nechta raqam qatnashganini aniqlovchi funksiya tuzing.
//Input:                  Output:
//“0aaa5789bbb”             5
//“hello c++! ”             0

//int countDigits(string str) {
//    int count = 0;
//    for (int i = 0; i < str.length(); i++) {
//        if (isdigit(str[i])) {
//            count++;
//        }
//    }
//    return count;
//}
//
//int main() {
//    string str1 = "sdsd8s8d8f8";
//    string str2 = "hello c++! ";
//    cout << countDigits(str1) << endl; // Output: 5
//    cout << countDigits(str2) << endl; // Output: 0
//    return 0;
//}



//////////////157-mashq////////////////


//Str satr berilgan. Shu satrdagi raqam bo’lmagan barcha belgilarni o’chirib,
//natijani qaytaradigan funksiya tuzing.
//Input:                                 Output:
//Str = “foundation F-35”                  “35”
//Str = “bu masala 20 ball beradi”         “20”
//Str = “imtihonda ko’chirmang”             “”




//string removeNonDigits(string str) {
//    string result = "";
//    for (int i = 0; i < str.length(); i++) {
//        if (isdigit(str[i])) {
//            result += str[i];
//        }
//    }
//    return result;
//}
//
//int main() {
//    string input = "foundation F-35";
//    string output = removeNonDigits(input);
//    cout << output << endl;
//    return 0;
//}





///////////////156-mashq///////////////

//Str satr berilgan. (Str.size() > 5) Shu satrdagi dastlabki 2 ta belgi bilan oxirgi 2
//belgisini o’rnini almashtirib qaytaruvchi funksiya tuzing.
//Input:                                 Output:
//Str = “foundation”                  “onundatifo”
//Str = “hello”                          “lolhe”

//
//string replaceFirstAndLastTwoChars(string str) {
//        string firstTwoChars = str.substr(0, 2);
//        string lastTwoChars = str.substr(str.length()-2, 2);
//        string middleChars = str.substr(2, str.length()-4);
//        return lastTwoChars + middleChars + firstTwoChars;
//    }
//
//
//int main() {
//    string input = "hello";
//    string output = replaceFirstAndLastTwoChars(input);
//    cout << output << endl;
//    return 0;
//}


//////////////155-mashq////////////////


//Kamida 2ta harfdan iborat satr berilgan. Shu satrni boshidagi va oxiridagi
//harflarisiz natijani qaytaradigan funksiya tuzing.
//withoutEnd("Hello") → "ell"
//withoutEnd("java") → "av"
//withoutEnd("coding") → "odin"

//string withoutEnd(string str) {
//    return str.substr(1, str.length() - 2);
//}
//
//int main() {
//    string str;
//    cout << "Enter a string: ";
//    getline(cin, str);
//    cout << "String without first and last character: " << withoutEnd(str) << endl;
//    return 0;
//}



////////////////154-mashq////////////////


////Str satr berilgan. Shu satrda ‘+’ belgisi necha marta ishtirok etganligini
////aniqlovchi funksiya tuzing.


//int countPlus(string str) {
//    int count = 0;
//    for (int i = 0; i < str.length(); i++) {
//        if (str[i] == '+') {
//            count++;
//        }
//    }
//    return count;
//}
//
//int main() {
//    string str;
//    cout << "Enter a string: ";
//    getline(cin, str);
//    cout << "Number of '+' characters: " << countPlus(str) << endl;
//    return 0;
//}



//////////////////153-mashq/////////////


//Str satr berilgan. Agar shu satr “PDP” bilan tugagan bo’lsa “ishonamiz”so’zini,
//aks holda “bizga qo’shiling” ni qaytaruvchi funksiya tuzing.
//Input:
//Str = “Eng zo’ri PDP”
//Str = “self-study juda qiyin”
//Output:
//“ishonamiz”
//“bizga qo’shiling”


//string checkString(string str) {
//    if (str.substr(str.length()-3) == "PDP") {
//        return "ishonamiz";
//    }
//    return "bizga qo'shiling";
//}
//
//int main() {
//    string str;
//    cout << "Enter a string: ";
//    getline(cin, str);
//    cout << checkString(str) << endl;
//    return 0;
//}





//////////////152mashq////////////////

//Uzunligi kamida 2ga teng bo’lgan satr berilgan. Shu satrni oxirgi 2ta harfini 3
//marta yonma-yon qilib natijani qaytaradigan funksiya tuzing.
//Input:                    Output:
//extraEnd("Hello")        "lololo"
//extraEnd("ab")           "ababab"
//extraEnd("Hi")           "HiHiHi"





//string extraEnd(string str) {
//    if (str.length() >= 2) {
//        string end = str.assign(str.length()-2);
//        return end + end + end;
//    }
//    return str;
//}
//
//int main() {
//    string str;
//    cout << "Enter a string: ";
//    cin >> str;
//    cout << extraEnd(str) << endl;
//    return 0;
//}







///////////////151-mashq///////////////


//2 ta a va b satrlar berilgan. a satr davomidan b satrni qo’yib natijani
//qaytaruvchi funksiya tuzing. Agar a satrni oxirgi belgisi b satrni 1-belgisi bilan bir
//xil bolsa, bu belgilarni 1 tasini hisobga oling.
//Input:                          Output:
//conCat("abc", "cat")           "abcat"
//conCat("dog", "cat")           "dogcat"
//conCat("abc", "")              "abc


//string conCat(string a, string b) {
//    if (a.length() > 0 && b.length() > 0 && a[a.length()-1] == b[0]) {
//        return a + b.substr(1);
//    }
//    return a + b;
//}
//
//int main() {
//    string a, b;
//    cout << "Enter two strings to concatenate: ";
//    cin >> a >> b;
//    cout << conCat(a, b) << endl;
//    return 0;
//}








//////////////150-mashq//////////////


//Sizga matn berilgan. Sizni vazifangiz shu matndan “c++” so’zi nechtaligini
//sanab natijani qaytaruvchi funksiya tuzishdan iborat.
//Input:                              Output:
//function(" ababc++ bba c++”)           2
//function("abracadabra suf kuf”)        0
//function(" c++, c#, python, java”)     1



//int countCpp(string str) {
//  int count = 0;
//  for (int i = 0; i < str.length() - 2; i++) {
//    if (str.substr(i, 3) == "c++") {
//      count++;
//    }
//  }
//  return count;
//}
//
//int main() {
//    string input = " c++, c#, python, java";
//    int count = countCpp(input);
//    cout << count << endl;
//    return 0;
//}






///////////////149-mashq///////////////

//Satr berilgan. Shu satrda “pdp” va “c++” so’zlari
//teng miqdorda uchrasa, true qaytaring.
//equality ("c++pdp") → true
//equality ("pdppdp") → false
//equality ("1pdp1cadoc++") → true


//bool equality(string str) {
//    int count_pdp = 0;
//    int count_cpp = 0;
//
//    for (int i = 0; i < str.length(); i++) {
//        if (str.erase(i, 3) == "pdp") {
//            count_pdp++;
//        }
//        if (str.erase(i, 3) == "c++") {
//            count_cpp++;
//        }
//    }
//
//    return count_pdp == count_cpp;
//}
//
//int main() {
//    string str = "pdppdp";
//
//    bool result = equality(str);
//
//    cout << boolalpha << result << endl;
//
//    return 0;
//}

/////////////////148-mashq//////////////


//Str satri berilganda barcha unli harflarni ikki martadan ko’paytirib qaytaruvchi
//funskiya tuzing. (unli harflar A, a, I, i, O, o, U, u, E, e)
//Input:                         Output:
//function("PDP")                "PDP"
//function("Alice")              "AAliicee”
//function("today exam")         "toodaay eexaam"


//string doubleVowels(string str) {
//    string result = "";
//    for (int i = 0; i < str.length(); i++) {
//        if (str[i] == 'A' || str[i] == 'a' || str[i] == 'E' || str[i] == 'e' ||
//            str[i] == 'I' || str[i] == 'i' || str[i] == 'O' || str[i] == 'o' ||
//            str[i] == 'U' || str[i] == 'u') {
//            result += string(2, str[i]);
//        } else {
//            result += str[i];
//        }
//    }
//    return result;
//}
//
//int main() {
//    string input = "today exam";
//    cout << doubleVowels(input) << endl;
//    return 0;
//}
//
//







///////////////147-mashq/////////////


//Berilgan stringdagi barcha ‘d’ harfini o’chirib chiquvchi funksiya tuzing

//string removeChar(string str, char ch) {
//    string result = "";
//
//    for (int i = 0; i < str.length(); i++) {
//        if (str[i] != ch) {
//            result += str[i];
//        }
//    }
//
//    return result;
//}
//
//int main() {
//    string str = "Hello, world!";
//    char ch = 'd';
//
//    string newStr = removeChar(str, ch);
//
//    cout << newStr << endl;
//
//    return 0;
//}


////////////////146//////////////////



//Berilgan belgini katta yoki kichik harf ekanligini aniqlaydigan funksiya tuzing.
//Agar belgi harf bo’lmasa “harf emas”, katta harf bo’lsa “katta harf”, kichik harf
//bo’lsa “kichik harf” nomli natija qaytsin.
//Input:                Output:
//isLetter(‘H’)     “Katta harf”
//isLetter(‘h’)     “Kichik harf”
//isLetter(‘5’)     “Harf emas”


//void isLetter(char ch) {
//    if (ch >= 'A' && ch <= 'Z') {
//        cout << "Katta harf" << endl;
//    } else if (ch >= 'a' && ch <= 'z') {
//        cout << "Kichik harf" << endl;
//    } else {
//        cout << "Harf emas" << endl;
//    }
//}
//
//int main() {
//    char ch = 'H';
//
//    isLetter(ch);
//
//    return 0;
//}








///////////////145-mashq////////////////


//Berilgan satrni palindrom so‘z ekanligini tekshiruvchi funksiya tuzing. Ya‘ni
//o'ngdan ham chapdan ham o'qilgandagi holati bir xil bo‘ladigan so'z
//"palindrome" so‘z bo‘ladi. “palindrome” ga misol: “absba”, “non”.




//bool isPalindrome(string str) {
//    int n = str.length();
//
//    for (int i = 0; i < n / 2; i++) {
//        if (str[i] != str[n - i - 1]) {
//            return false;
//        }
//    }
//
//    return true;
//}
//
//int main() {
//    string str = "absba";
//
//    if (isPalindrome(str)) {
//        cout << str << " is a palindrome" << endl;
//    } else {
//        cout << str << " is not a palindrome" << endl;
//    }
//
//    return 0;
//}
//









////////////////144-mashq///////////////


//Butun sondan iborat kiritilgan str1 va str2 satrlarni arifmetik
//qo’shib qiymatni ham string toifasida qaytaradigan funksiya tuzing.
//Input: Output:
//add("1”, “2”) “3”
//add("-10”, “20”) “10”


//string add(string str1, string str2) {
//  int num1 = stoi(str1);
//  int num2 = stoi(str2);
//
//  int sum = num1 + num2;
//
//
//  return to_string(sum);
//}
//
//int main() {
//  string result = add("1", "2");
//  cout << result << endl; // 3
//  return 0;
//}








//////////////143-mashq/////////////


//Str satr berilgan. Shu satrdagi barcha raqamlarni o’chirib qaytaruvchi agar
//raqam bo’lmasa satrni o’zini qaytaruvch funksiya tuzing
//Input: Output:
//Str = “hammagaOmad” “hammagaOmad”
//Str = “11sal487o22m2222” “Salom”





//string removeDigits(string str) {
//  string result = "";
//
//  for (char c : str) {
//    if (!isdigit(c)) {
//      result += c;
//    }
//  }
//
//  return result;
//}
//
//int main() {
//  string str;
//  cout<<"Str: ";
//  cin>>str;
//
//  string result = removeDigits(str);
//  cout << result << endl;
//  return 0;
//}









//////////////142-mashq/////////////

//Konlosedan kiritilgan parol ya`ni passwordni quyidagi shartlarga mos
//kelishini tekshiradigan funksiya tuzing. Funksiya kiritilgan satrga qarab true yoki
//false natija qaytarishi kerak.
//Shartlar:
// Uzunligi 8 dan kam bo‘lmasin;
// Kamida 1 ta kichik harf ishtirok etsin;
// Kamida 1 ta ‘*’ yoki ‘#’ belgisi ishtirok etsin;
// Kamida 1 ta son ishtirok etsin




//bool checkPassword(string password) {
//  if (password.length() < 8) {
//    return false;
//  }
//  int lowercaseCount = 0; // Kichik harflarni sanayotgan o'zgaruvchi
//  int specialCharCount = 0; // '*' va '#' belgilarni sanayotgan o'zgaruvchi
//  int digitCount = 0; // Sonlarni sanayotgan o'zgaruvchi
//  for (int i = 0; i < password.length(); i++) {
//    if (islower(password[i])) { // Agar harf kichik bo'lsa
//      lowercaseCount++;
//    } else if (password[i] == '*' || password[i] == '#') { // Agar belgi '*' yoki '#' bo'lsa
//      specialCharCount++;
//    } else if (isdigit(password[i])) { // Agar son bo'lsa
//      digitCount++;
//    }
//  }
//  if (lowercaseCount < 1 || specialCharCount < 1 || digitCount < 1) { // Har bir shart bajarilmagan bo'lsa
//    return false;
//  }
//  return true; // Barcha shartlar bajarilgan bo'lsa
//}
//
//int main() {
//  string password;
//  cout << "Parolni kiriting: ";
//  cin >> password;
//
//  if (checkPassword(password)) {
//    cout << "Parol qabul qilindi." << endl;
//  } else {
//    cout << "Parol qabul qilinmadi." << endl;
//  }
//
//  return 0;
//}








//////////////141-mashq/////////////


//Konsoldan kiritilgan matndagi ortiqcha probellarni o’chirib natijani
//qaytaruvchi funksiya tuzing.


//string removeExtraSpaces(string str) {
//  string result = "";
//  bool spaceFlag = false;
//  for (int i = 0; i < str.length(); i++) {
//    if (str[i] != ' ') {
//      result += str[i];
//      spaceFlag = false;
//    } else {
//      if (!spaceFlag) {
//        result += ' ';
//        spaceFlag = true;
//      }
//    }
//  }
//  return result;
//}
//
//int main() {
//  string str;
//  cout << "Matnni kiriting: ";
//  getline(cin, str);
//
//  string result = removeExtraSpaces(str);
//  cout << "Natija: " << result << endl;
//
//  return 0;
//}




//////////////140-mashq////////////

//Str satr berilgan. (Str.length() >= 5) shu satrni oxirgi 4 ta belgisini o’chirib
//qaytaradigan funksiya tuzing.
//Str = “salom” ---------> s
//Str = “stolstul” --------> stol


//string removeLastFour(string str) {
//    return str.substr(0, str.length() - 4); // oxirgi 4 ta belgini o'chirib qaytaradi
//}
//
//int main() {
//    string str;
//    cout << "Satrni kiriting: ";
//    getline(cin, str); // getline orqali satrni o'qib olamiz
//    string result = removeLastFour(str); // oxirgi 4 ta belgini o'chiramiz
//    cout << "Natija: " << result << endl;
//    return 0;
//}
//









//////////////139-mashq////////////


//Toq uzunlikdagi satr berilgan. Satrni o’rtasidagi 3ta harfdan iborat yangi
//satrni qaytaradigan funksiya tuzing.
//middleThree("Candy") → "and"
//middleThree("and") → "and"
//middleThree("solving") → "lvi"

//string middleThree(string str) {
//    int mid = str.length() / 2; // satrning o'rta indeksi
//    return str.substr(mid - 1, 3); // o'rta 3 ta harfni qaytaradi
//}
//
//int main() {
//    string str;
//    cout << "Satrni kiriting: ";
//    getline(cin, str); // getline orqali satrni o'qib olamiz
//    string result = middleThree(str); // o'rta 3 ta harfni topamiz
//    cout << "Natija: " << result << endl;
//    return 0;
//}





//////////////138-mashq/////////////

//Juft uzunlikdagi satr berilgan. Shu satrni birinchi yarmini qaytaruvchifunksiya
//tuzing.
//Input:             Output:
//"WooHoo"            “Woo”
//“HelloThere”        “Hello”



//string birinchiYarim(string s) {
//    int uzunlik = s.length();
//    string yarim = s.substr(0, uzunlik/2);
//    return yarim;
//}
//
//int main() {
//    string satr;
//    cout<< "Satr: ";
//    cin >> satr;
//    string birinci_yarim = birinchiYarim(satr);
//    cout << birinci_yarim << endl;
//    return 0;
//}






/////////////137-mashq/////////////


//S1 va S2 satr berilgan. S2 satrida birinchi uchragan S1 satrni o’chiradigan
//dastur tuzing.
//Input:                            Output:
//str1="salom"
//str2="Assalomu Alaykum"         "Asu Alaykum"
//
//str1="Alaykum"
//str2="Assalomu Alaykum"         "Assalomu"
//

//int main() {
//    string str1;
//    string str2;
//
//    cout << "Str1: ";
//    cin >> str1;
//    cout << "Str2: ";
//    cin >> str2;
//
//    int index = str2.find(str1); // find the index of str1 in str2
//    if (index != -1) { // if found
//        str2.erase(index, str1.length()); // erase the substring from str2
//    }
//
//    cout << str2 << endl; // print the modified string
//
//    return 0;
//}





////////////136-mashq///////////////

//Str satr berilgan. str satrda “pdp” so’zi nechanchi indexda uchrashini aniqlab
//qiymat sifatida qaytaruvchi funksiya tuzing. Agar so’z topilmasa -1 natija qaytsin.
//Qidirish funksiyalaridan foydalanilmasin.


//int findIndex(string str) {
//    int index = -1;
//    for (int i = 0; i < str.length() - 2; i++) {
//        if (str[i] == 'p' && str[i+1] == 'd' && str[i+2] == 'p') {
//            index = i;
//            break;
//        }
//    }
//    return index;
//}
//
//int main() {
//    string str = "Bu pdp kursi juda yaxshi";
//    int index = findIndex(str);
//    if (index == -1) {
//        cout << "So'z topilmadi" << endl;
//    } else {
//        cout << "'pdp' so'zi " << index << "-chi indeksta uchrashgan" << endl;
//    }
//    return 0;
//}


/////////////135-mashq///////////////

//Str satr berilgan. Shu satrni teskari qilib qaytaruvchi funksiya tuzing.
//Input:                 Output:
//Str = “coding”           “gnidoc”


//    string reverseString(string str) {
//    string reversedStr = "";
//    for (int i = str.length() - 1; i >= 0; i--) {
//        reversedStr += str[i];
//    }
//    return reversedStr;
//}
//
//int main() {
//    string str;
//    cout << "Str: ";
//    cin >> str;
//
//    cout << "Teskari Str: " << reverseString(str) << endl;
//    return 0;
//}



////////////134-mashq///////////////


////Str satr berilgan. Agar Str satrini uzunligi toq bo’lsa o’rtadagi 1 ta belgini,
////aks holda 2 ta belgisini o’chirib qaytaruvchi funksiya tuzing.
////Input:                         Output:
////Str = “imtihon”  ----------->  "imthon"
////Str = “Omad”  ----------->     "Od"
//
//string removeMiddleChar(string str) {
//    int len = str.length();
//    if (len % 2 == 1) { // toq uzunlikdagi satr
//        int middleIndex = len / 2;
//        str.erase(middleIndex, 1);
//    } else { // juft uzunlikdagi satr
//        int middleIndex = len / 2;
//        str.erase(middleIndex - 1, 2);
//    }
//    return str;
//}
//
//int main() {
//    string Str;
//    cout<<"Satrni kiriting: ";
//    cin >> Str;
//    cout << removeMiddleChar(Str) << endl; // imthon
//    return 0;
//}
//
//
//



/////////////133-mashq////////////////

//Str satrini tarkibida ‘A’ harfi necha marta borligini aniqlovchi funksiya
//tuzing.

//int countA(string str) {
//    int count = 0;
//    for (int i = 0; i < str.length(); i++) {
//        if (str[i] == 'A') {
//            count++;
//        }
//    }
//    return count;
//}
//
//int main() {
//    string str;
//    cout << "Satrni kiriting: ";
//    cin >> str;
//    int aCount = countA(str);
//    cout << "Satrda " << aCount << " marta bor." << endl;
//    return 0;
//}





/////////////132-mashq//////////////////

//Berilgan butun sonning raqamlar yig’indisini topuvchi rekursiv funksiya
//tuzing


//int sumOfDigits(int n) {
//    if (n == 0) {
//        return 0;
//    } else {
//        return (n % 10) + sumOfDigits(n / 10);
//    }
//}
//
//int main() {
//    int num;
//    cout << "Enter a number: ";
//    cin >> num;
//    cout << "Sum of digits: " << sumOfDigits(num) << endl;
//    return 0;
//}













////////131-mashq/////////////

//Berilgan satrdagi barcha harflarni kattasiga almashtiradigan funksiya tuzing.


//string uppercase(string str) {
//    for (int i = 0; i < str.length(); i++) {
//        if (str[i] >= 'a' && str[i] <= 'z') {
//            str[i] = str[i] - 32;
//        }
//    }
//    return str;
//}
//
//int main() {
//    string str;
//    cout << "Satr kiriting: ";
//    getline(cin, str);
//    cout << "Katta harflar: " << uppercase(str) << endl;
//    return 0;
//}










      // 130-mashq


//      Str satr berilgan. Shu satrdagi har “PDP” so’zidan keyin “Academy” ni
//      qo’shib qaytaruvchi funksiya tuzing agar “PDP” bo’lmasa satrni o’zi qaytsin.
//      Input:                                Output:
//      Str = “salom”                        “Salom”
//      Str = “ ”             “helloPDPAcademygreatPDPAcademy”
//


//      string addAcademy(string str) {
//    size_t found = str.find("PDP"); // PDP so'zi indeksini topamiz
//    if (found != string::npos) { // agar PDP topilsa
//        str.insert(found+3, "Academy"); // PDP so'zidan keyin Academy qo'shamiz
//        return str;
//    } else { // PDP topilmagan holatda satrni o'ziga qaytarib qo'yamiz
//        return str;
//    }
//}
//
//int main() {
//    string str;
//    cout << "Satrni kiriting: ";
//    getline(cin, str); // getline orqali satrni o'qib olamiz
//    cout << "Natija: " << addAcademy(str) << endl;
//    return 0;
//}
//


      //129-MASQ

//      Uzunligi kamida 1ga teng bo’lgan 2ta satr berilgan. Ushbu satrlarni 1-
//      harflarini hisobga olmasdan, satrlarni qo’shib natijani qaytaruvchi funksiya
//      tuzing.
//       nonStart("Hello", "There") → "ellohere"
//       nonStart("java", "code") → "avaode"
//       nonStart("shotl", "java") → "hotava

//      string nonStart(string str1, string str2) {
//  string result = str1.substr(1) + str2.substr(1);
//  return result;
//}
//
//int main() {
//  string s1, s2;
//  cout << "Enter two strings: ";
//  cin >> s1 >> s2;
//  cout << "Result: " << nonStart(s1, s2) << endl;
//  return 0;
//}





      //128-mashq


//
//      Misol tarzida berilgan quyidagi matritsaning qora bilan belgilangan o’rindagi
//      sonlarining yig’indisini topuvchi dastur tuzing. Dastur ixtiyoriy NxN matritsa
//      uchun ishlashi kerak. N-toq son.
//      Array[][] = {
//      {10, 11, 22, 31, 41},
//      {50, 60, 73, 81, 91},
//      {10, 11, 12, 13, 14},
//      {15, 16, 17, 18, 19},
//      {20, 21, 22, 23, 24} }


//int main()
//{
//    int array[5][5] =
//    {
//        {10, 11, 22, 31, 41},
//        {50, 60, 73, 81, 91},
//        {10, 11, 12, 13, 14},
//        {15, 16, 17, 18, 19},
//        {20, 21, 22, 23, 24}
//    };
//    int sum = 0;
//
//    for (int i = 0; i < 5; i++)
//    {
//        for (int j = 0; j < 5; j++)
//        {
//            if (i == j)
//            {
//                sum += array[i][j];
//            }
//        }
//    }
//
//    cout << "Sum of diagonal elements is: " << sum << endl;
//
//    return 0;
//}


     // 127-mashq


//     Misol tarzida berilgan quyidagi matritsaning qora bilan belgilangan o’rindagi
//     sonlarining yig’indisini topuvchi dastur tuzing. Dastur ixtiyoriy N x N matritsa
//     uchun ishlashi kerak. N-toq son.
//     Array[][] = {
//     {10, 11, 22, 31, 41},
//     {50, 60, 73, 81, 91},
//     {10, 11, 12, 13, 14},
//     {15, 16, 17, 18, 19},
//     {20, 21, 22, 23, 24} }
//
//
//
//     int main()
//{
//    int n;
//    cout << "Enter N: ";
//    cin >> n;
//    int array[n][n];
//    int sum = 0;
//
//    for (int i = 0; i < n; i++)
//    {
//        for (int j = 0; j < n; j++)
//        {
//            cin >> array[i][j];
//            if (i == 0 || j == n-1 || i == n - 1 || j == 0)
//            {
//                sum += array[i][j];
//            }
//        }
//    }
//
//    cout << "Sum of corners: " << sum << endl;
//
//    return 0;
//}



      //  126-mashq

//        M x N o’lchamli butun sonli massiv berilgan. Massivni elemetlar yig’indisi eng
//        kichik bo’lgan qatorni chiqaruvchi dastur tuzing.

//      int m, n;
//    cout << "Massiv o'lchamini kiriting (m va n): ";
//    cin >> m >> n;
//
//    int arr[m][n];
//
//    // Massivni kiriting
//    cout << "Massivni kiriting:n";
//    for(int i = 0; i < m; i++) {
//        for(int j = 0; j < n; j++) {
//            cin >> arr[i][j];
//        }
//    }
//
//    // Elementlarning yig'indisini hisoblash va eng kichik yig'indisni topish
//    int min_sum = INT_MAX; // eng katta int qiymati
//    int min_index = -1;
//    for(int i = 0; i < m; i++) {
//        int sum = 0;
//        for(int j = 0; j < n; j++) {
//            sum += arr[i][j];
//        }
//        if(sum < min_sum) {
//            min_sum = sum;
//            min_index = i;
//        }
//    }
//
//    // Natijani chiqarish
//    cout << "Eng kichik yig'indi " << min_index << "-chi qatorda: ";
//    for(int j = 0; j < n; j++) {
//        cout << arr[min_index][j] << " ";
//    }
//
//    return 0;
//}


     //125-mashq


//    N x N o’lchamli butun sonli massiv berilgan. Shu massivdagi juft va toq sonlar
//    nechtaligini aniqlovchi dastur tuzing.

//     int main() {
//    int n;
//    cout << "Massiv o'lchamini kiriting: ";
//    cin >> n;
//    int arr[n][n];
//    int even_count = 0, odd_count = 0;
//
//    // Massivni kiriting
//    cout << "Massivni kiriting:n";
//    for(int i = 0; i < n; i++) {
//        for(int j = 0; j < n; j++) {
//            cin >> arr[i][j];
//            if(arr[i][j] % 2 == 0) {
//                even_count++;
//            } else {
//                odd_count++;
//            }
//        }
//    }
//
//    // Juft va toq sonlarni nechtaligini hisoblash
//    cout << "Massivda " << even_count << " ta juft son va " << odd_count << " ta toq son mavjud.n";
//
//    return 0;
//}
//
//








     //124-mashq

//    M x N o‘lchamli matritsa berilgan. Matritsaning eng katta elementini 0 ga
//    tenglovchi dastur tuzilsin.


//     int main() {
//    int m, n;
//    cin >> m >> n;
//
//    int arr[m][n];
//    int max_val = -1;
//
//    for (int i = 0; i < m; i++) {
//        for (int j = 0; j < n; j++) {
//            cin >> arr[i][j];
//            if (arr[i][j] > max_val) {
//                max_val = arr[i][j];
//            }
//        }
//    }
//
//    for (int i = 0; i < m; i++) {
//        for (int j = 0; j < n; j++) {
//            if (arr[i][j] == max_val) {
//                arr[i][j] = 0;
//            }
//            cout << arr[i][j] << " ";
//        }
//        cout << endl;
//    }
//
//    return 0;
//}





      // 123-mashq

//      M x N o‘lchamli matritsa va k butun soni berilgan. Matritsaning k-ustunidagi
//      barcha sonning qiymatini nolga tenglab chiquvchi dastur tuzilsin.


//int main() {
//    int m, n, k;
//    cin >> m >> n >> k;
//
//    int arr[m][n];
//
//    for (int i = 0; i < m; i++) {
//        for (int j = 0; j < n; j++) {
//            cin >> arr[i][j];
//        }
//    }
//
//    for (int i = 0; i < m; i++) {
//        arr[i][k] = 0;
//    }
//
//    for (int i = 0; i < m; i++) {
//        for (int j = 0; j < n; j++) {
//            cout << arr[i][j] << " ";
//        }
//        cout << endl;
//    }
//
//    return 0;
//}


       // 122-mashq

//       N x M o’lchamdagi butun sonli massiv va k
//       butun soni berilgan. (N>k)
//       Massivdagi k-qatordagi barcha sonlarni
//       10 martaga ko’paytiruvchi dastur tuzilsin

//        int main() {
//    const int N = 5;
//    const int M = 6;
//    int k = 2;
//    int a[N][M] = {{1, 2, 3, 4, 5, 6},
//                  {7, 8, 9, 10, 11, 12},
//                  {13, 14, 15, 16, 17, 18},
//                  {19, 20, 21, 22, 23, 24},
//                  {25, 26, 27, 28, 29, 30}};
//
//    for (int i = 0; i < M; i++) {
//        a[k][i] *= 10;
//    }
//
//    // Natijani chiqaramiz
//    cout << "Natija:" << endl;
//    for (int i = 0; i < N; i++) {
//        for (int j = 0; j < M; j++) {
//            cout << a[i][j] << " ";
//        }
//        cout << endl;
//    }
//
//    return 0;
//}



       //121-mashq

//       M x N o’lchamli butun sonlardan iborat massiv berilgan. Massivni
//       1- ustunini ko’paytmasini va oxirgi ustunni yig’indisini aniqlab
//       ekranga chiqaruvchi dastur tuzing.


//       int main() {
//    int M, N;
//    cout << "Matritsa o'lchamini kiriting (M va N): ";
//    cin >> M >> N;
//
//    int matritsa[M][N];
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            cout << "Matritsa elementini kiriting: ";
//            cin >> matritsa[i][j];
//        }
//    }
//
//    int kopaytma = 1;
//    int yigindi = 0;
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            if (i == 0) {
//                kopaytma *= matritsa[i][j];
//            }
//            if (i == M-1) {
//                yigindi += matritsa[i][j];
//            }
//        }
//    }
//
//    cout << "1-ustunining ko'paytmasi: " << kopaytma << endl;
//    cout << "Oxirgi ustunining yig'indisi: " << yigindi << endl;
//
//    return 0;
//}





       // 120-mashq

//      M x N o‘lchamli butun sonli matritsa va K soni berilgan.
//      Matritsa ichida K soni bor yoki yo’qligini aniqlovchi dastur tuzing.



//       int main() {
//    int M, N, K;
//    cout << "Matritsa o'lchamini kiriting (M va N): ";
//    cin >> M >> N;
//    cout << "Qidirilayotgan sonni kiriting (K): ";
//    cin >> K;
//
//    int matritsa[M][N];
//    bool bor = false; // K soni borligini tekshirish uchun flag
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            cout << "Matritsa elementini kiriting: ";
//            cin >> matritsa[i][j];
//            if (matritsa[i][j] == K) {
//                bor = true;
//            }
//        }
//    }
//
//    if (bor) {
//        cout << "Matritsa ichida " << K << " soni bor.\n";
//    } else {
//        cout << "Matritsa ichida " << K << " soni yo'q.\n";
//    }
//
//    return 0;
//}
//








       //119-mashq

//   So’zlardan tashkil topgan M x N o‘lchamli massiv va str satri berilgan.Massiv
//   ichida str satr bor yo’qligini aniqlovchi dastur tuzing.


//     int main() {
//    int m, n;
//    cin >> m >> n;
//
//    string arr[m][n];
//    string str;
//    cin >> str;
//
//    bool found = false;
//
//    for (int i = 0; i < m; i++) {
//        for (int j = 0; j < n; j++) {
//            cin >> arr[i][j];
//            if (arr[i][j] == str) {
//                found = true;
//            }
//        }
//    }
//
//    if (found) {
//        cout << "The string is found in the array" << endl;
//    } else {
//        cout << "The string is not found in the array" << endl;
//    }
//
//    return 0;
//}
//


     // 118-mashq



//     Misol tarzida berilgan quyidagi matritsaning qora bilan belgilangan o’rindagi
//     sonlarining yig’indisini topuvchi dastur tuzing. Dastur ixtiyoriy NxN matritsa
//     uchun ishlashi kerak. N-toq son.
//     Array[][] = {
//    {10, 11, 22, 31, 41},
//    {50, 60, 73, 81, 91},
//    {10, 11, 12, 13, 14},
//    {15, 16, 17, 18, 19},
//    {20, 21, 22, 23, 24}}

//      int main() {
//    const int N = 5;
//    int array[N][N] = {{10, 11, 22, 31, 41},
//                       {50, 60, 73, 81, 91},
//                       {10, 11, 12, 13, 14},
//                       {15, 16, 17, 18, 19},
//                       {20, 21, 22, 23, 24}};
//
//    int maxSum = INT_MIN; // eng katta yig'indi
//    int maxIndex = -1; // eng katta yig'indining indeksi
//
//    // Har bir qatordining elementlarining yig'indisini topish
//    for (int i = 0; i < N; i++) {
//        int sum = 0;
//        for (int j = 0; j < N; j++) {
//            sum += array[i][j];
//        }
//        // Agar joriy yig'indi eng katta bo'lsa, uni saqlash
//        if (sum > maxSum) {
//            maxSum = sum;
//            maxIndex = i;
//        }
//    }
//
//    // Natijani chiqarish
//    cout << "Eng katta yig'indisi: " << maxSum << endl;
//    cout << "Qator #" << maxIndex+1 << endl;
//
//    return 0;
//}
//






      // 117-mashq

//      N x M o’lchamdagi butun sonli massiv berilgan. Ekranga qatordagi
//      elementlarning yig’indisi eng katta bo’lgan qatorni chiqaring.

//      int main() {
//    const int M = 4;
//    const int N = 3;
//    int array[N][M] = {{1, 5, 9},
//                       {-2, 6, 10},
//                       {3, -7, 11},
//                       {4, 8, 12}};
//
//    int maxSum = INT_MIN; // eng katta yig'indi
//    int maxIndex = -1; // eng katta yig'indining indeksi
//
//    // Har bir qatordining elementlarining yig'indisini topish
//    for (int i = 0; i < N; i++) {
//        int sum = 0;
//        for (int j = 0; j < M; j++) {
//            sum += array[i][j];
//        }
//        // Agar joriy yig'indi eng katta bo'lsa, uni saqlash
//        if (sum > maxSum) {
//            maxSum = sum;
//            maxIndex = i;
//        }
//    }
//
//    // Natijani chiqarish
//    cout << "Eng katta yig'indisi: " << maxSum << endl;
//    cout << "Qator #" << maxIndex+1 << endl;
//
//    return 0;
//}








       //116-mashq


//       N x M o’lchamdagi butun sonli massiv berilgan. Har bir ustunidagi
//       elementlarning yig’indisini aniqlang

//
//       int main() {
//    const int M = 3;
//    const int N = 4;
//    int array[M][N] = {{1, -2, 3, 4},
//                       {5, 6, -7, 8},
//                       {9, 10, 11, 12}};
//
//    // Har bir ustunidagi elementlarning yig'indisini topish
//    for (int j = 0; j < N; j++) {
//        int sum = 0;
//        for (int i = 0; i < M; i++) {
//            sum += array[i][j];
//        }
//        cout << "Ustun #" << j+1 << " yig'indisi: " << sum << endl;
//    }
//
//    return 0;
//}





       //115-mashq

//       N x M o’lchamdagi butun sonli massiv berilgan. Massivdagi eng katta
//       elementni qiymatini 100 ga oshiruvchi dastur tuzing.



//       int main() {
//    const int M = 3;
//    const int N = 4;
//    int array[M][N] = {{1, -2, 3, 4},
//                       {5, 6, -7, 8},
//                       {9, 10, 11, 12}};
//
//    // Eng katta elementni topish
//    int max_element = array[0][0];
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            if (array[i][j] > max_element) {
//                max_element = array[i][j];
//            }
//        }
//    }
//
//    // Qiymatni oshirish
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            if (array[i][j] == max_element) {
//                array[i][j] += 100;
//            }
//        }
//    }
//
//    // Yangilangan massivni chiqarish
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            cout << array[i][j] << " ";
//        }
//        cout << endl;
//    }
//
//    return 0;
//}






     // 114-mashq

//     N x M o’lchamdagi butun sonli massiv berilgan. Har bir qatordagi
//     elementlarning yig’indisini aniqlang.

// int main() {
//    const int M = 3;
//    const int N = 4;
//    int array[M][N] = {{1, -2, 3, 4},
//                       {5, 6, -7, 8},
//                       {9, 10, 11, 12}};
//
//    int row_sum[M] = {0}; // Har bir qator uchun yig'indi
//
//    // Qatorlar uchun yig'indini hisoblash
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            row_sum[i] += array[i][j];
//        }
//    }
//
//    // Yig'indilari chiqarish
//    for (int i = 0; i < M; i++) {
//        cout << "Qator " << i << " yig'indi: " << row_sum[i] << endl;
//    }
//
//    return 0;
//}
//





      //113-mashq


//      N x M o’lchamdagi butun sonli massiv berilgan. Massivdagi eng
//     kichik manfiy toq sonning joylashgan indeksini topadigan dastur tuzing.



//      int main() {
//    const int M = 3;
//    const int N = 4;
//    int array[M][N] = {{1, -2, 3, 4},
//                       {5, 6, -7, 8},
//                       {9, 10, 11, 12}};
//
//    int min_neg_odd = INT_MAX; // Eng katta int qiymatini olamiz
//    int min_neg_odd_row = -1;
//    int min_neg_odd_col = -1;
//
//    // Eng kichik manfiy toq sonni topish
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            if (array[i][j] < 0 && array[i][j] % 2 != 0 && array[i][j] < min_neg_odd) {
//                min_neg_odd = array[i][j];
//                min_neg_odd_row = i;
//                min_neg_odd_col = j;
//            }
//        }
//    }
//
//    if (min_neg_odd == INT_MAX) {
//        cout << "Massivda manfiy toq son yo'q" << endl;
//    } else {
//        cout << "Eng kichik manfiy toq sonning indeksi: (" << min_neg_odd_row << ", " << min_neg_odd_col << ")" << endl;
//    }
//
//    return 0;
//}


     // 112-mashq

//     M x N butun sonli array1 va array2 (2 ta MxN o’lchamli massiv bo’ladi)
//     massivlari berilgan. array1 massiv tarkibidagi eng katta element bilan array2
//     massivdagi eng kichik elementni ko’paytmasini chiqaruvchi dastur tuzing.

//     int main() {
//    int n, m;
//    cin >> n >> m;
//
//    int arr[n][m];
//    int min_negative_odd = -1;
//    int min_negative_odd_index = -1;
//
//    for (int i = 0; i < n; i++) {
//        for (int j = 0; j < m; j++) {
//            cin >> arr[i][j];
//            if (arr[i][j] < 0 && arr[i][j] % 2 != 0) {
//                if (min_negative_odd == -1 || arr[i][j] < arr[min_negative_odd_odd_index]) {
//                    min_negative_odd = j;
//                    min_negative_odd_index = i;
//                }
//            }
//        }
//    }
//
//    cout << min_negative_odd_index << endl;
//
//    return 0;
//}








       //111-mashq



//       M x N butun sonli array1 va array2 (2 ta MxN o’lchamli massiv bo’ladi)
//       massivlari berilgan. array1 massiv tarkibidagi eng katta element bilan array2
//       massivdagi eng kichik elementni ko’paytmasini chiqaruvchi dastur tuzing



//       const int M = 3;
//    const int N = 4;
//    int array1[M][N] = {{1, 2, 3, 4},
//                        {5, 6, 7, 8},
//                        {9, 10, 11, 12}};
//    int array2[M][N] = {{12, 11, 10, 9},
//                        {8, 7, 6, 5},
//                        {4, 3, 2, 1}};
//
//    int max_elem = array1[0][0];
//    int min_elem = array2[0][0];
//
//    // Eng katta elementni topish
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            if (array1[i][j] > max_elem) {
//                max_elem = array1[i][j];
//            }
//        }
//    }
//
//    // Eng kichik elementni topish
//    for (int i = 0; i < M; i++) {
//        for (int j = 0; j < N; j++) {
//            if (array2[i][j] < min_elem) {
//                min_elem = array2[i][j];
//            }
//        }
//    }
//
//    // Ko'paytma chiqarish
//    cout << "Eng katta element: " << max_elem << endl;
//    cout << "Eng kichik element: " << min_elem << endl;
//    cout << "Ko'paytma: " << max_elem * min_elem << endl;
//
//    return 0;
//}
//








       //110-mashq

//       N x M o’lchamdagi butun sonli massiv berilgan. Massivdagi eng katta manfiy
//       son joylashgan indeksini topadigan dastur tuzing


//       int main() {
//    int n, m;
//    cin >> n >> m;
//
//    int arr[n][m];
//    int max_negative = -1;
//    int max_negative_index = -1;
//
//    for (int i = 0; i < n; i++) {
//        for (int j = 0; j < m; j++) {
//            cin >> arr[i][j];
//            if (arr[i][j] < 0 && arr[i][j] < max_negative) {
//                max_negative = arr[i][j];
//                max_negative_index = i;
//            }
//        }
//    }
//
//    cout << max_negative_index << endl;
//
//    return 0;
//}








       // 109-mashq

//       Butun sonli 3x4 o‘lchamli massivni birinchi va oxirgi qatoridagi sonlarni
//       ko’paytmasini topuvchi dastur tuzing


//int main() {
//    const int ROWS = 3;
//    const int COLS = 4;
//    int arr[ROWS][COLS] = {{1, 2, 3, 4},
//                           {5, 6, 7, 8},
//                           {9, 10, 11, 12}};
//
//    // Matritsa:
//    for (int i = 0; i < ROWS; i++) {
//        for (int j = 0; j < COLS; j++) {
//            cout << arr[i][j] << " ";
//        }
//        cout << endl;
//    }
//
//    // Birinchi qatoridagi sonlar ko'paytmasi:
//    int first_row_mult = 1;
//    for (int j = 0; j < COLS; j++) {
//        first_row_mult *= arr[0][j];
//    }
//    cout << "Birinchi qatoridagi sonlar ko'paytmasi: " << first_row_mult << endl;
//
//    // Oxirgi qatoridagi sonlar ko'paytmasi:
//    int last_row_mult = 1;
//    for (int j = 0; j < COLS; j++) {
//        last_row_mult *= arr[ROWS-1][j];
//    }
//    cout << "Oxirgi qatoridagi sonlar ko'paytmasi: " << last_row_mult << endl;
//
//    return 0;
//}



         //108-mashq

//         n ta butun sondan tashkil topgan 1 o’lchamli massiv berilgan. Massivdagi har
//         bir toq songa massivdagi birinchi sonni qo’shib chiquvchi dastur tuzilsin.
//         Input:                                 Output:
//         [1, 4, 1, 4]                            true
//         [1, 4, 2, 4]                            false
//         [1, 1, 1, 4, 4, 4, 1, 1, 4, 1]          true


//    int main() {
//    int n;
//    cout << "Massiv uzunligini kiriting: ";
//    cin >> n;
//
//    int a[n];
//    cout << "Massiv elementlarini kiriting:\n";
//    for (int i = 0; i < n; i++) {
//        cin >> a[i];
//    }
//
//    bool b = true;
//    for (int i = 0; i < n; i++) {
//        if ((a[i] + a[0]) % 2 != 1) {
//            b = false;
//            break;
//        }
//    }
//
//    if (b) {
//        cout << "true";
//    } else {
//        cout << "false";
//    }
//
//    return 0;
//}



         //107-mashq

//         n ta butun sonli massiv berilgan. Bunda har bir element 1 yoki 4 dan tashkil
//         topgan bo'lsa, true qiymatini qaytaruvchi dastur tuzing.


//         bool checkArray(int arr[], int n) {
//    for (int i = 0; i < n; i++) {
//        if (arr[i] != 1 && arr[i] != 4) {
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    int n;
//    cout << "Enter the size of the array: ";
//    cin >> n;
//
//    int arr[n];
//    cout << "Enter the elements of the array: ";
//    for (int i = 0; i < n; i++) {
//        cin >> arr[i];
//    }
//
//    if (checkArray(arr, n)) {
//        cout << "True" << endl;
//    } else {
//        cout << "False" << endl;
//    }
//
//    return 0;
//}



         //106-mashq


//         n ta butun sonli massiv berilgan. Massiv elementlari orasidan yig'indisi eng
//         katta bo'ladigan 2 ta qo'shni elementni chiqaruvchi dastur tuzilsin




//int main() {
//    int n;
//    cout << "Massiv uzunligini kiriting: ";
//    cin >> n;
//
//    int a[n];
//    for (int i = 0; i < n; i++) {
//        cout << "a[" << i << "] = ";
//        cin >> a[i];
//    }
//
//    int max1 = INT_MIN, max2 = INT_MIN;
//    for (int i = 0; i < n; i++) {
//        if (a[i] > max1) {
//            max2 = max1;
//            max1 = a[i];
//        } else if (a[i] > max2) {
//            max2 = a[i];
//        }
//    }
//
//    cout << "Eng katta birinchi element: " << max1 << endl;
//    cout << "Eng katta ikkinchi element: " << max2 << endl;
//
//    return 0;
//}


         //105-mashq


//         n ta butun sondan iborat massiv berilgan. Massiv birinchi elementidan
//         kichkina bo'lgan barcha sonlarni chiqaruvchi dastur tuzilsin. Agar bunday
//         element bo'lmasa, nol chiqarilsin.

//    int main() {
//    int n;
//    cout << "Massiv uzunligini kiriting: ";
//    cin >> n;
//
//    int a[n];
//    cout << "Massiv elementlarini kiriting: ";
//    for (int i = 0; i < n; i++) {
//        cin >> a[i];
//    }
//
//    bool flag = false;
//    for (int i = 1; i < n; i++) {
//        if (a[i] < a[0]) {
//            flag = true;
//            cout << a[i] << " ";
//        }
//    }
//
//    if (!flag) {
//        cout << 0 << endl;
//    } else {
//        cout << endl;
//    }
//
//    return 0;
//}



         //104-mashq

//         N ta butun sonli massiv berilgan. Agar massivni hamma elementi musbat juft
//         bo’lsa “urra” ni, aks holda “zo’r” ni chiqaruvchi dastur tuzing.
//        Input:                  Output:
//         N=[4,4,86,48,102]      “urra”
//         N=[3,-84,15,86]        “zo’r”





//int main() {
//    int n;
//    cout << "Massiv uzunligini kiriting: ";
//    cin >> n;
//
//    int a[n];
//    cout << "Massiv elementlarini kiriting: ";
//    for (int i = 0; i < n; i++) {
//        cin >> a[i];
//    }
//
//    bool flag = true;
//    for (int i = 0; i < n; i++) {
//        if (a[i] <= 0 || a[i] % 2 == 1) {
//            flag = false;
//            break;
//        }
//    }
//
//    if (flag) {
//        cout << "urra" << endl;
//    } else {
//        cout << "zo'r" << endl;
//    }
//
//    return 0;
//}
//








        //103-mashq

//        N ta butun sondan iborat massiv berilgan. Massiv elementlari orasidan
//        yig'indisi eng kichik bo'ladigan 2 ta qo'shini elementni chiqaruvchi programma
//        tuzilsin


//        int main() {
//    int n;
//    cout << "Massiv uzunligini kiriting: ";
//    cin >> n;
//
//    int a[n];
//    cout << "Massiv elementlarini kiriting: ";
//    for (int i = 0; i < n; i++) {
//        cin >> a[i];
//    }
//
//    int min1 = a[0], min2 = a[1];
//    for (int i = 2; i < n; i++) {
//        if (a[i] < min1) {
//            min2 = min1;
//            min1 = a[i];
//        }
//        else if (a[i] < min2) {
//            min2 = a[i];
//        }
//    }
//
//    cout << "Eng kichik 2 ta qo'shini elementlari: " << min1 << " va " << min2 << endl;
//
//    return 0;
//}






         //102-mashq


//         kamida 2 ta butun sondan iborat massiv berilgan. Shu massivdagi oxirgi
//         2ta elementini ko’paytirib natijani chiqaruvchi dastur tuzing.


//    int main() {
//    int arr[2];
//    cout << "Massiv elementlarini kiriting: ";
//    cin >> arr[0] >> arr[1];
//
//    int result = arr[0] * arr[1];
//    cout << "Oxirgi 2ta element ko'paytirilgan natija: " << result << endl;
//
//    return 0;
//}





       // 101-mashq

//       N ta butun sonli massiv berilgan. Shu massivda nechta 3 xonali, nechta 2
//       xonali, nechta 1 xonali son bor ekanligini aniqlovchi dastur tuzing.



//        int main() {
//    int n;
//    cout << "Massiv uzunligini kiriting: ";
//    cin >> n;
//
//    int arr[n];
//    int count1 = 0;
//    int count2 = 0;
//    int count3 = 0;
//
//    for (int i = 0; i < n; i++) {
//        cout << i + 1 << "-chi elementni kiriting: ";
//        cin >> arr[i];
//
//        if (arr[i] >= 100 && arr[i] <= 999) {
//            count3++;
//        } else if (arr[i] >= 10 && arr[i] <= 99) {
//            count2++;
//        } else if (arr[i] >= 0 && arr[i] <= 9) {
//            count1++;
//        }
//    }
//
//    cout << "1 xonali sonlar soni: " << count1 << endl;
//    cout << "2 xonali sonlar soni: " << count2 << endl;
//    cout << "3 xonali sonlar soni: " << count3 << endl;
//
//    return 0;
//}






         //100-mashq


//         int tipda massiv berilgan. Massivda 2ta yoki undan ortiq ketma ketjoylashgan
//         elementlar gruppalarini sonini qaytaring.
//         countClumps([1, 2, 2, 3, 4, 4]) → 2
//         countClumps([1, 1, 2, 1, 1]) → 2
//         countClumps([1, 1, 1, 1, 1]) → 1




//int countClumps(int arr[], int n) {
//    int count = 0;
//
//    for (int i = 0; i < n; i++) {
//        bool isClump = false;
//
//        while (i < n - 1 && arr[i] == arr[i + 1]) {
//            isClump = true;
//            i++;
//        }
//
//        if (isClump) {
//            count++;
//        }
//    }
//
//    return count;
//}
//
//int main() {
//    int arr[] = {1, 2, 2, 3, 4, 4};
//    int n = sizeof(arr) / sizeof(arr[0]);
//
//    cout << countClumps(arr, n) << endl;
//
//    return 0;
//}



//int countClumps(int arr[], int n) {
//    int count = 0;
//    bool isClump = false;
//    for (int i = 1; i < n; i++) {
//        if (arr[i] == arr[i-1]) {
//            if (!isClump) {
//                isClump = true;
//                count++;
//            }
//        } else {
//            isClump = false;
//        }
//    }
//    return count;
//}
//
//int main() {
//    int arr[] = {1, 2, 2, 3, 4, 4};
//    int n = sizeof(arr)/sizeof(arr[0]);
//    cout << countClumps(arr, n) << endl; // Output: 2
//    return 0;
//}




      //99-mashq

//      int tipida massiv berilgan. Massivda “oynali” bo’lak deb, Agarda massivdagibir
//      guruh elementlarni teskari tartibda joylashgani ham shu massivda joylashgan
//      bolsa, bu guruh elementlar massivning “oynali” bolagi deb ataymiz,yani {1, 2, 3,8, 9, 3, 2, 1}
//      massivda 1 2 3 bor va uni teskari tartibdagisi 3 2 1 ham massivda bor
//      va bu “oynali” bolakning uzunligi 3ga teng. Berilgan massivda eng uzun “oynali”
//      bolakni toping va qaytaring.
//      maxMirror([1, 2, 3, 8, 9, 3, 2, 1]) → 3
//      maxMirror([1, 2, 1, 4]) → 3
//      maxMirror([7, 1, 2, 9, 7, 2, 1]) → 2

//
//int findLongestOynaliBolak(int arr[], int size) {
//    int maxLength = 0;
//    int currentLength = 0;
//    int i = 0;
//    int j = size - 1;
//    while (i <= j) {
//        if (arr[i] == arr[j]) {
//            currentLength++;
//            if (i == j) {
//                currentLength++;
//            }
//            maxLength = max(maxLength, currentLength);
//            currentLength = 0;
//            i++;
//            j--;
//        } else if (arr[i] < arr[j]) {
//            currentLength++;
//            i++;
//        } else {
//            currentLength++;
//            j--;
//        }
//    }
//    return maxLength;
//}
//
//int main() {
//    int arr[] = {1, 2, 3, 8, 9, 3, 2, 1};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    int longestOynaliBolak = findLongestOynaliBolak(arr, size);
//    cout << longestOynaliBolak << endl; // 3
//    return 0;
//}





     //  98-mashq

//     Musbat son n berilgan. Quyidagi korinishda massiv yarating:
//     {1, 1, 2, 1, 2, 3, ... 1, 2, 3 .. n}.
//     seriesUp(3) → [1, 1, 2, 1, 2, 3]
//     seriesUp(4) → [1, 1, 2, 1, 2, 3, 1, 2, 3, 4]
//     seriesUp(2) → [1, 1, 2]

//
//int* squareUp(int n) {
//    int* arr = new int[n * n]; // bo'sh massiv yaratish
//    int index = n * n - 1; // massivning oxirgi elementi indeksi
//    for (int i = 1; i <= n; i++) {
//        for (int j = 1; j <= i; j++) {
//            arr[index] = j; // massivning oxiridan boshlab qiymatlar joylashishi
//            index--;
//        }
//    }
//    return arr;
//}
//
//int main() {
//    int n;
//    cout << "Enter a positive integer: ";
//    cin >> n;
//
//    int* arr = squareUp(n);
//    for (int i = 0; i < n * n; i++) {
//        cout << arr[i] << " ";
//    }
//    cout << endl;
//
//    delete[] arr; // bo'sh massivni ochirish
//    return 0;
//}





   //  97-mashq

//   Musbat son n berilgan. n*n uzunlikda va quyidagi korinishga ega massivyarating
//   va qaytaring. n=3 uchun misolida: {0, 0, 1, 0, 2, 1, 3, 2, 1}.
//   squareUp(3) → [0, 0, 1, 0, 2, 1, 3, 2, 1]
//   squareUp(2) → [0, 1, 2, 1]
//   squareUp(4) → [0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1]





     // 96-mashq



//     2ta int tipida a va b massiv berilgan. b massivdagi
//     barcha son a massividauchrasa true qaytaring.
//     linearIn([1, 2, 4, 6], [2, 4]) → true
//     linearIn([1, 2, 4, 6], [2, 3, 4]) → false
//     linearIn([1, 2, 4, 4, 6], [2, 4]) → true


//    bool linearIn(int a[], int n, int b[], int m) {
//    int i = 0;
//    int j = 0;
//    while (i < n && j < m) {
//        if (a[i] == b[j]) {
//            j++;
//        }
//        i++;
//    }
//    return (j == m);
//}
//
//int main() {
//    int a[] = {1, 2, 4, 6};
//    int b[] = {2, 4};
//    int n = sizeof(a)/sizeof(a[0]);
//    int m = sizeof(b)/sizeof(b[0]);
//    bool result = linearIn(a, n, b, m);
//    cout << boolalpha << result << endl; // true
//    return 0;
//}





      //95-mashq

//      int tipida massiv berilgan. Agar massivni 2 qismga bo’lishni iloji bolsa, va 1-
//      qismdagi hamda 2-qismdagi elementlar yigindisi teng bolsa, true qaytaring.
//      canBalance([1, 1, 1, 2, 1]) → true
//      canBalance([2, 1, 1, 2, 1]) → false canBalance([10, 10]) → true canBalance([10, 0, 1, -1, 10]) → true



//      bool canBalance(int arr[], int n) {
//    int sumLeft = 0;
//    int sumRight = 0;
//    for (int i = 0; i < n; i++) {
//        sumLeft += arr[i];
//        for (int j = i+1; j < n; j++) {
//            sumRight += arr[j];
//        }
//        if (sumLeft == sumRight) {
//            return true;
//        }
//        sumRight = 0;
//    }
//    return false;
//}
//
//int main() {
//    int arr[] = {1, 1, 1, 2, 1};
//    int n = sizeof(arr)/sizeof(arr[0]);
//    bool result = canBalance(arr, n);
//    cout << boolalpha << result << endl; // true
//    return 0;
//}
//
//






      //  94-mashq

//      Start va end sonlari berilgan. Shunday string tipidagi massiv hosil qilingki uni
//      startdan boshlab end sonigacha barcha sonlar bilan toldiring, lekin son 3ga
//      karrali bolsa “Fizz” bilan, 5ga karrali bolsa “Buzz” bilan, ham 3ga ham 5ga karrali
//      bolsa “FizzBuzz” bilan toldiring.
//      fizzBuzz(1, 6) → ["1", "2", "Fizz", "4", "Buzz"]
//      fizzBuzz(1, 8) → ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7"]
//      fizzBuzz(1, 11) → ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz"]

//
//int main() {
//    int start, end;
//    cout << "Enter start and end integers: ";
//    cin >> start >> end;
//
//    for (int i = start; i <= end; i++) {
//        if (i % 3 == 0 && i % 5 == 0) {
//            cout << "FizzBuzz" << endl;
//        } else if (i % 3 == 0) {
//            cout << "Fizz" << endl;
//        } else if (i % 5 == 0) {
//            cout << "Buzz" << endl;
//        } else {
//            cout << i << endl;
//        }
//    }
//
//    return 0;
//}







        // 93-mashq

//        Int tipida massiv berilgan. Massivni juft elementlarini chap qismga, toq
//        elementlarini ong qismga joylashtiring, bunda sonlar joylashuvi ahamiyatsiz.
//        evenOdd([1, 0, 1, 0, 0, 1, 1]) → [0, 0, 0, 1, 1, 1, 1]
//        evenOdd([3, 3, 2]) → [2, 3, 3]
//        evenOdd([2, 2, 2]) → [2, 2, 2]

//        void evenOdd(int arr[], int n) {
//    int i = 0, j = n - 1;
//    while (i < j) {
//        while (arr[i] % 2 == 0 && i < j)
//            i++;
//        while (arr[j] % 2 == 1 && i < j)
//            j--;
//        if (i < j) {
//            swap(arr[i], arr[j]);
//            i++;
//            j--;
//        }
//    }
//}
//
//int main() {
//    int arr[] = {1, 0, 1, 0, 0, 1, 1};
//    int n = sizeof(arr) / sizeof(arr[0]);
//    evenOdd(arr, n);
//    for (int i = 0; i < n; i++)
//        cout << arr[i] << " ";
//    return 0;
//}







         // 92-mashq

//          int tipida massiv berilgan. Massivdagi barcha 0 sonlarini shu 0 ni o’ng qismida
//          uchraydigan eng katta toq son bilan almashtiring. Agar eng katta toq son
//          uchramasa, 0 ni shunday qoldiring.
//          zeroMax([0, 5, 0, 3]) → [5, 5, 3, 3]
//          zeroMax([0, 4, 0, 3]) → [3, 4, 3, 3]
//          zeroMax([0, 1, 0]) → [1, 1, 0]


//    void zeroMax(int arr[], int size) {
//    int maxOdd = 0;
//    for (int i = size - 1; i >= 0; i--) {
//        if (arr[i] % 2 != 0 && arr[i] > maxOdd) {
//            maxOdd = arr[i];
//        }
//        if (arr[i] == 0) {
//            arr[i] = maxOdd;
//        }
//    }
//    for (int i = 0; i < size; i++) {
//        cout << arr[i] << " ";
//    }
//}
//
//int main() {
//    int arr[] = {0, 5, 0, 3};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    zeroMax(arr, size);
//    return 0;
//}









       // 91-MASHQ

//       Int tipida massiv berilgan. Massivdagi barcha 10 sonlarini olib tashlang va qolgan
//       sonlarni iloji boricha chaproqqa suring. Massiv oxirida qolgan bosh joylarni 0
//       bilan toldiring.
//       withoutTen([1, 10, 10, 2]) → [1, 2, 0, 0]
//       withoutTen([10, 2, 10]) → [2, 0, 0]
//       withoutTen([1, 99, 10]) → [1, 99, 0]


//
//    void withoutTen(int arr[], int size) {
//    int newArr[size];
//    int j = 0;
//    for (int i = 0; i < size; i++) {
//        if (arr[i] != 10) {
//            newArr[j] = arr[i];
//            j++;
//        }
//    }
//    for (int i = j; i < size; i++) {
//        newArr[i] = 0;
//    }
//    for (int i = 0; i < size; i++) {
//        arr[i] = newArr[i];
//    }
//}
//
//int main() {
//    int arr[] = {1, 10, 10, 2};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    withoutTen(arr, size);
//    for (int i = 0; i < size; i++) {
//        cout << arr[i] << " ";
//    }
//    return 0;
//}
//










         //90-MASHQ


//    Int tipida massiv va n soni berilgan. Agar massivdagi elementdan 1ta oldingi va
//    1ta keyingi elementlar shu elementga teng bolmasa, shu elementni “yolg’iz”
//    element deylik. Massivda barcha yolgiz elementlarni qoshni elementlarini kattasi
//    bilan almashtiring va massivni qaytaring.
//    notAlone([1, 2, 3], 2) → [1, 3, 3]
//    notAlone([1, 2, 3, 2, 5, 2], 2) → [1, 3, 3, 5, 5, 2]
//    notAlone([3, 4], 3) → [3, 4]
//    notAlone([1, 1, 1, 2], 1) → [1, 1, 1, 2]




//void shiftLeft(int arr[], int n, int val) {
//    for (int i = 0; i < val; i++) {
//        int temp = arr[0];
//        for (int j = 0; j < n-1; j++) {
//            arr[j] = arr[j+1];
//        }
//        arr[n-1] = temp;
//    }
//}
//
//void notAlone(int arr[], int n, int val) {
//    for (int i = 1; i < n-1; i++) {
//        if (arr[i] == val && arr[i-1] != val && arr[i+1] != val) {
//            int maxVal = max(arr[i-1], arr[i+1]);
//            arr[i] = maxVal;
//        }
//    }
//}
//
//int main() {
//    // shiftLeft example
//    int arr1[] = {6, 2, 5, 3};
//    int n1 = sizeof(arr1)/sizeof(arr1[0]);
//    int val1 = 1;
//    shiftLeft(arr1, n1, val1);
//    for (int i = 0; i < n1; i++) {
//        cout << arr1[i] << " ";
//    }
//    cout << endl; // 2 5 3 6
//
//    // notAlone example
//    int arr2[] = {1, 2, 3};
//    int n2 = sizeof(arr2)/sizeof(arr2[0]);
//    int val2 = 2;
//    notAlone(arr2, n2, val2);
//    for (int i = 0; i < n2; i++) {
//        cout << arr2[i] << " ";
//    }
//    cout << endl; // 1 3 3
//
//    return 0;
//}
//


//2-VARIANT

//int* notAlone(int arr[], int n, int val) {
//    for (int i = 1; i < n - 1; i++) {
//        if (arr[i] == val && arr[i - 1] != val && arr[i + 1] != val) {
//            arr[i] = max(arr[i - 1], arr[i + 1]);
//        }
//    }
//    return arr;
//}
//
//int main() {
//    int arr[] = {1, 2, 3};
//    int n = sizeof(arr) / sizeof(arr[0]);
//    int val = 2;
//    int* result = notAlone(arr, n, val);
//    for (int i = 0; i < n; i++) {
//        cout << result[i] << " ";
//    }
//    return 0;
//}








          //  89-MASHQ


//          Int tipida massiv berilgan. Massivda bir 10ga karrali sondan boshqa 10ga karrali
//          son chiqquncha joylashgan sonlarni eski 10ga karrali sonlarga almashtiring va
//          qaytaring.
//          tenRun([2, 10, 3, 4, 20, 5]) → [2, 10, 10, 10, 20, 20]
//          tenRun([10, 1, 20, 2]) → [10, 10, 20, 20]
//          tenRun([10, 1, 9, 20]) → [10, 10, 10, 20]


//          void tenRun(int arr[], int n) {
//    int currentMultiple = -1;
//    for (int i = 0; i < n; i++) {
//        if (arr[i] % 10 == 0) {
//            currentMultiple = arr[i];
//        } else if (currentMultiple != -1) {
//            arr[i] = currentMultiple;
//        }
//    }
//}
//
//int main() {
//    int arr[] = {10, 1, 20, 2};
//    int n = sizeof(arr)/sizeof(arr[0]);
//    tenRun(arr, n);
//    for (int i = 0; i < n; i++) {
//        cout << arr[i] << " ";
//    }
//    cout << endl; // 2 10 10 10 20 20
//    return 0;
//}
//





       //88-MASHQ

//       Int tipida massiv berilgan. Massivni
//       1-elementini oxirigi joylashtirib qaytaring.
//       shiftLeft([6, 2, 5, 3]) → [2, 5, 3, 6]
//       shiftLeft([1, 2]) → [2, 1]
//       shiftLeft([1]) → [1]

//void shiftLeft(int arr[], int n) {
//    int temp = arr[0];
//    for (int i = 0; i < n-1; i++) {
//        arr[i] = arr[i+1];
//    }
//    arr[n-1] = temp;
//}
//
//int main() {
//    int arr[] = {6, 2, 5, 3};
//    int n = sizeof(arr)/sizeof(arr[0]);
//    shiftLeft(arr, n);
//    for (int i = 0; i < n; i++) {
//        cout << arr[i] << " ";
//    }
//    cout << endl; // 2 5 3 6
//    return 0;
//}



       //87-MASHQ

//       2ta start va end sonlar berilgan. startdan boshlab, end gacha barchasonlardan
//       tashkil topgan yangi massiv qaytaring.
//       fizzArray3(5, 10) → [5, 6, 7, 8, 9]
//       fizzArray3(11, 18) → [11, 12, 13, 14, 15, 16, 17]
//       fizzArray3(1, 3) → [1, 2]


//       int* fizzArray3(int start, int end) {
//    int n = end - start;
//    int* arr = new int[n];
//    for (int i = 0; i < n; i++) {
//        arr[i] = start + i;
//    }
//    return arr;
//}
//
//int main() {
//    int* arr = fizzArray3(5, 10);
//    int n = 5;
//    for (int i = 0; i < n; i++) {
//        cout << arr[i] << " ";
//    }
//    cout << endl; // 5 6 7 8 9
//    delete[] arr;
//    return 0;
//}





      //86-MASHQ

//      Int tipida massiv berilgan. Agar massivda 3ta ketma-ket sonlar birin ketin
//      joylashgan bolsa, true qaytaring.
//      tripleUp([1, 4, 5, 6, 2]) → true
//      tripleUp([1, 2, 3]) → true
//      tripleUp([1, 2, 4]) → false

//        bool tripleUp(int arr[], int size) {
//    for (int i = 0; i < size - 2; i++) {
//        if (arr[i] == arr[i+1]-1 && arr[i] == arr[i+2]-2) {
//            return true;
//        }
//    }
//    return false;
//}
//
//int main() {
//    int arr[] = {1, 2, 4};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    if (tripleUp(arr, size)) {
//        cout << "true";
//    } else {
//        cout << "false";
//    }
//    return 0;
//}
//
//



//       85-mashq

//       Int tipida massiv va n soni berilgan. Massivni birinchi n ta elementlar gruppasi
//       oxirgi n ta elementlar grupasiga teng bolsa true qaytaring. Bunda n ni oraligi 0
//       dan massivni uznuligigacha.
//       sameEnds([5, 6, 45, 99, 13, 5, 6], 0) → true
//       sameEnds([5, 6, 45, 99, 13, 5, 6], 1) → false
//       sameEnds([5, 6, 45, 99, 13, 5, 6], 2) → true
//       sameEnds([5, 6, 45, 99, 13, 5, 6], 3) → false

//        bool sameEnds(int arr[], int n) {
//    if (n >= 0 && n <= sizeof(arr)/sizeof(arr[0])) {
//        for (int i = 0; i < n; i++) {
//            if (arr[i] != arr[sizeof(arr)/sizeof(arr[0])-n+i]) {
//                return false;
//            }
//        }
//        return true;
//    }
//    return false;
//}
//
//int main() {
//    int arr[] = {5, 6, 45, 99, 13, 5, 6};
//    int n = 1;
//    bool result = sameEnds(arr, n);
//    cout << boolalpha << result << endl; // true
//    return 0;
//}
//



        //84-mashq


//        Int tipida massiv berilgan. Agar massivda 3 soni aniq 3marta uchrasa, va shu
//        elementlar birontasi ketma-ket joylashmagan bolsa true qaytaring.
//        haveThree([3, 1, 3, 1, 3]) → true
//        haveThree([3, 1, 3, 3]) → false
//        haveThree([3, 4, 3, 3, 4]) → false

//
//        bool haveThree(int arr[], int size) {
//    int count = 0;
//    for (int i = 0; i < size; i++) {
//        if (arr[i] == 3) {
//            count++;
//        }
//    }
//    return (count == 3);
//}
//
//
//    int main() {
//    int arr[] = {3, 1, 3, 1, 3};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    bool result = haveThree(arr, size);
//    cout << boolalpha << result << endl; // true
//    return 0;
//}
//




        //83-mashq

//        Int tipida massiv berilgan. Agar massiv birin ketin joylashgan 3ta toq yoki2ta juft
//        elementlar ketma-ketligini oz ichiga olsa, true qaytaring.
//        modThree([2, 1, 3, 5]) → true
//        modThree([2, 1, 2, 5]) → false
//        modThree([2, 4, 2, 5]) → true

//bool modThree(int arr[], int n) {
//    for(int i=0; i<n-2; i++) {
//        if(arr[i] % 2 == 0 && arr[i+1] % 2 == 0 && arr[i+2] % 2 == 0) {
//            return true;
//        }
//        if(arr[i] % 2 == 1 && arr[i+1] % 2 == 1 && arr[i+2] % 2 == 1) {
//            return true;
//        }
//    }
//    return false;
//}
//
//int main() {
//    int arr[] = {2, 1, 3, 5};
//    int n = sizeof(arr) / sizeof(arr[0]);
//    if(modThree(arr, n)) {
//        cout << "true"; // true
//    } else {
//        cout << "false";
//    }
//    return 0;
//}



     // 82-mashq

//     Int tipida massiv berilgan. Agar massivda
//     1dan o’ng tarafda 2 soni uchrasa,true qaytaring.
//       has12([1, 3, 2]) → true
//       has12([3, 1, 2]) → true
//       has12([3, 1, 4, 5, 2]) → true
//       has12([2, 1, 4, 1, 6, 2]) → true


//bool has12(int arr[], int n) {
//    bool has_one = false;
//    for(int i=0; i<n; i++) {
//        if(arr[i] == 1) {
//            has_one = true;
//        }
//        if(has_one && arr[i] == 2) {
//            return true;
//        }
//    }
//    return false;
//}
//
//int main() {
//    int arr[] = {3, 1, 4, 5, 2};
//    int n = sizeof(arr) / sizeof(arr[0]);
//    if(has12(arr, n)) {
//        cout << "true"; // true
//    } else {
//        cout << "false";
//    }
//    return 0;
//}




     // 81-mashq

//     Int tipida massiv berilgan. Agar massivda 2ta ketma-ket 7 soni qoshni bolsayoki
//     ularni faqat 1ta element ajratib tursa, true qaytaring.
//     has77([1, 7, 7]) → true
//     has77([1, 7, 1, 7]) → true
//     has77([1, 7, 1, 1, 7]) → false



//      bool has77(int arr[], int size) {
//    for (int i = 0; i < size - 1; i++) {
//        if (arr[i] == 7 && arr[i + 1] == 7) {
//            if (i < size - 2 && arr[i + 2] == 7) {
//                continue;
//            }
//            if (i > 0 && arr[i - 1] == 7) {
//                continue;
//            }
//            return true;
//        }
//    }
//    return false;
//}
//
//int main() {
//    int arr[] = {1, 7, 7};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    bool result = has77(arr, size);
//    cout << boolalpha << result << endl;
//    return 0;
//}


      //80-mashq


//      Int tipida teng uzunlikda 2ta a va b massivlar berilgan. a massivni n-inchi
//      indeksidagi element b massivni n-inchi indeksidagi elementdan 1taga yoki 2taga
//      farq qiladiganlarni sonini toping.
//      matchUp([1, 2, 3], [2, 3, 10]) → 2
//      matchUp([1, 2, 3], [2, 3, 5]) → 3
//      matchUp([1, 2, 3], [2, 3, 3]) → 2


//
//     int matchUp(int a[], int b[], int n) {
//  int count = 0;
//  for (int i = 0; i < n; i++) {
//    if (abs(a[i] - b[i]) == 1 || abs(a[i] - b[i]) == 2) {
//      count++;
//    }
//  }
//  return count;
//}
//
//      int main() {
//  int a[] = {1, 2, 3};
//  int b[] = {2, 3, 10};
//
//  int result = matchUp(a, b, sizeof(a)/sizeof(a[0]));
//
//  cout << result << endl; // Konsolga "2" chiqadi
//
//  return 0;
//}



      //79-mashq

//       int tipida massiv berilgan. Agar massivda 2 sonidan 1ta keyin 2 soni kelsa yoki 4
//       sonidan 1ta keyin 4 kelsa, hamda shu ikki shart 1 vaqtda bajarmasa, true
//       qaytaring.
//       either24([1, 2, 2]) → true
//       either24([4, 4, 1]) → true
//       either24([4, 4, 1, 2, 2]) → false



//      bool either24(int arr[], int size) {
//  bool found2 = false;
//  bool found4 = false;
//
//  for (int i = 0; i < size - 1; i++) {
//    if (arr[i] == 2 && arr[i+1] == 2) {
//      found2 = true;
//    }
//    if (arr[i] == 4 && arr[i+1] == 4) {
//      found4 = true;
//    }
//  }
//
//  if ((found2 && !found4) || (!found2 && found4)) {
//    return true;
//  } else {
//    return false;
//  }
//}





       //78-mashq

//       int tipida massiv va n soni berilgan. Agar massivdagi barcha qo’shni-qo’shnijuft
//       elementlardan 1tasi n soniga teng bolsa, true qaytaring.
//       isEverywhere([1, 2, 1, 3], 1) → true
//       isEverywhere([1, 2, 1, 3], 2) → false
//       isEverywhere([1, 2, 1, 3, 4], 1) → false

//         bool isEverywhere(int arr[], int n, int x) {
//    for(int i=0; i<n-1; i++) {
//        if(arr[i] != x && arr[i+1] != x) {
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    int arr[] = {1, 2, 1, 3};
//    int n = sizeof(arr)/sizeof(arr[0]);
//    int x = 1;
//
//    if(isEverywhere(arr, n, x)) {
//        cout << "true";
//    } else {
//        cout << "false";
//    }
//
//    return 0;
//}



        //77-mashq

//        Int tipida massiv berilgan. Agar massivdagi
//        har bitta element 1 yoki 4 bolsatrue qaytaring.
//        only14([1, 4, 1, 4]) → true
//        only14([1, 4, 2, 4]) → falseonly14([1, 1]) → true

//    bool only14(int arr[], int size) {
//    for (int i = 0; i < size; i++) {
//        if (arr[i] != 1 && arr[i] != 4) {
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    int arr[] = {1, 4, 1, 4};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    if (only14(arr, size)) {
//        cout << "true";
//    } else {
//        cout << "false";
//    }
//    return 0;
//}


       //76-mashq

//         Int tipida massiv berilgan. Agar massivda
//         1 lar soni 4 lar sonidan kop bolsa,true qaytaring.
//         more14([1, 4, 1]) → true
//         more14([1, 4, 1, 4]) → falsemore14([1, 1]) → true

//       bool more14(int arr[], int size) {
//    int count1 = 0, count4 = 0;
//    for (int i = 0; i < size; i++) {
//        if (arr[i] == 1) {
//            count1++;
//        } else if (arr[i] == 4) {
//            count4++;
//        }
//    }
//    return count1 > count4;
//}
//
//int main() {
//    int arr[] = {1, 1};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    if (more14(arr, size)) {
//        cout << "true";
//    } else {
//        cout << "false";
//    }
//    return 0;
//}
//


       //75-mashq

//       Int tipida massiv berilgan. Massivda agar barcha
//       2 lar yig’indisi 8 bolsa, true qaytaring.
//       sum28([2, 3, 2, 2, 4, 2]) → true
//       sum28([2, 3, 2, 2, 4, 2, 2]) → false
//       sum28([1, 2, 3, 4]) → false


//       bool sum28(int nums[], int size) {
//    int sum = 0;
//    for (int i = 0; i < size; i++) {
//        if (nums[i] == 2) {
//            sum += nums[i];
//        }
//    }
//    return sum == 8;
//}
//
//int main() {
//    int nums[] = {1, 2, 3, 4};
//    int size = sizeof(nums) / sizeof(nums[0]);
//    cout <<boolalpha<< sum28(nums, size) << endl; // true
//    return 0;
//}





       //74-mashq

//       Int tipida massiv berilgan. Agar massivda
//       1 soni va 3 soni bolmasa, true qaytaring.
//       lucky13([0, 2, 4]) → true
//       lucky13([1, 2, 3]) → false
//       lucky13([1, 2, 4]) → false



//       bool lucky13(int arr[], int size) {
//    for (int i = 0; i < size; i++) {
//        if (arr[i] == 1 || arr[i] == 3) {
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    int arr[] = {1, 2, 4};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    if (lucky13(arr, size)) {
//        cout << "true";
//    } else {
//        cout << "false";
//    }
//    return 0;
//}





       // 73-mashq


//       Int tipida massiv berilgan. Agar massivda kamida 1marta 2 sonidan 1takeyin
//       yana 2 bolsa, true qaytaring.
//       has22([1, 2, 2]) → true
//       has22([1, 2, 1, 2]) → false
//       has22([2, 1, 2]) → false
//       has22([2, 3, 2, 2]) → true


//    bool has22(int arr[], int size) {
//    for (int i = 0; i < size - 1; i++) {
//        if (arr[i] == 2 && arr[i+1] == 2) {
//            return true;
//        }
//    }
//    return false;
//}
//
//int main() {
//    int arr[] = {1, 2, 3};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    if (has22(arr, size)) {
//        cout << "True";
//    } else {
//        cout << "False";
//    }
//    return 0;
//}
//

       //72-mashq

//        int tipida massiv berilgan. Massivdagi elementlar yigindisini toping, lekin masivda
//        uchraydigan 6 dan boshlanib, keying 7 soni chiqquncha bolgan ketma-ketlikdagi
//        elementlarni hisobga olmang.
//        sum67([1, 2, 2]) → 5
//        sum67([1, 2, 2, 6, 99, 99, 7]) → 5
//        sum67([1, 1, 6, 7, 2]) → 4
//        sum67([2, 7, 6, 2, 6, 7, 2, 7]) → 18

//       int sum67(int arr[], int size) {
//    int sum = 0;
//    bool skip = false;
//    for (int i = 0; i < size; i++) {
//        if (arr[i] == 6) {
//            skip = true;
//        }
//        if (!flag) {
//            sum += arr[i];
//        }
//        if (skip && arr[i] == 7) {
//            skip = false;
//        }
//    }
//    return sum;
//}
//
//int main() {
//    int arr[] = {1, 1, 6, 7, 2};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    cout << sum67(arr, size) << endl; // 4
//    return 0;
//}




       //71-mashq


//        Int tipida massiv berilgan. Massivdagi elementlar yig’indisiini toping, lekin
//        massivda 13 soni bolsa, 13ni ham va undan 1ta keyingi elementni ham hisobga
//        olmang.
//        sum13([1, 2, 2, 1]) → 6
//         sum13([13, 1, 2, 13, 2, 1, 13]) → 3
//          sum13([1, 1]) → 2
//           sum13([1, 2, 2, 1, 13]) → 6


//        int sum13(int arr[], int size) {
//    int sum = 0;
//    for (int i = 0; i < size; i++) {
//        if (arr[i] == 13) {
//            i++;
//        } else {
//            sum += arr[i];
//        }
//    }
//    return sum;
//}
//
//int main() {
//    int arr[] = {13, 1, 2, 13, 2, 1, 13};
//    int size = sizeof(arr) / sizeof(arr[0]);
//    cout << sum13(arr, size) << endl;
//    return 0;
//}




        //70-mashq
//
//       #include <algorithm>

////        Int tipida massiv berilgan. Massivni eng katta va eng
////        kichik elementlariayirmasini toping.
////        bigDiff([10, 3, 5, 6]) → 7
////        bigDiff([7, 2, 10, 9]) → 8
////        bigDiff([2, 10, 7, 2]) → 8


////    int bigDiff(int arr[], int n)
////    {
////    sort(arr, arr + n); // Massivni saralash
////    int min_element = arr[0]; // Eng kichik element
////    int max_element = arr[n-1]; // Eng katta element
////    return max_element - min_element; // Ayirmani topish va qaytarish
////}
////
////int main() {
////    int arr[] = {10, 3, 5, 6};
////    int n = sizeof(arr) / sizeof(arr[0]);
////    cout << bigDiff(arr, n); // 7
////    return 0;
////}


        //69-mashq

//        Int tipidagi berilgan massivni juft
//        elementlarsonini qaytaring.
//        countEvens([2, 1, 2, 3, 4]) → 3
//        countEvens([2, 2, 0]) → 3
//        countEvens([1, 3, 5]) → 0

//   int countEvens(int nums[], int size) {
//
//     int count = 0;
//
//       for (int i = 0; i < size; i++) {
//    if (nums[i] % 2 == 0) {
//      count++;
//    }
//  }
//
//  return count;
//}
//
//int main() {
//
//  int nums1[] = {2, 1, 2, 3, 4};
//  int nums2[] = {2, 2, 0};
//  int nums3[] = {1, 3, 5};
//
//  int count1 = countEvens(nums1, sizeof(nums1) / sizeof(nums1[0]));
//  int count2 = countEvens(nums2, sizeof(nums2) / sizeof(nums2[0]));
//  int count3 = countEvens(nums3, sizeof(nums3) / sizeof(nums3[0]));
//
//  cout << count1 << endl; // Output: 3
//  cout << count2 << endl; // Output: 3
//  cout << count3 << endl;
//
//  return 0;
//}
//









        //68-mashq

//        Int tipida istalgan uzunlikda 2ta a va b massiv berilgan. Shu massivlarni birinchi
//        elementlaridan iborat yangi massivni qaytaring. Agar bironta massivuzunligi 0
//        bolsa, osha massivni hisobga olmang.
//        front11([1, 2, 3], [7, 9, 8]) → [1, 7]
//        front11([1], [2]) → [1, 2]
//        front11([1, 7], []) → [1]


















      //67-mashq

//      Int tipida massiv berilgan. Agar massivda 1dan keyin 3 kelsa, biz 1
//      elementini “omadsiz” 1 deb ataymiz. Agar massivni birinchi 2ta yoki oxirgi 2ta
//      elementlari birontasi omadsiz 1 bo’lsa, true qaytaring.
//      unlucky1([1, 3, 4, 5]) → true
//      unlucky1([2, 1, 3, 4, 5]) → true
//      unlucky1([1, 1, 1]) → false


//bool unlucky1(int arr[], int length){        // massivda faqatgina 1dan keyingi 3 lar kelgan bolsa true qaytaradi
//    for (int i = 0; i < length - 1; i++) {
//            if (arr[i] == 1 && arr[i+1] == 3) {
//                return true;        }    }        // massivning boshiga yoki oxiriga (onyonidan ilk 2 yoki so'nggi 2 element)    // omadsiz 1 elementi kelgan bolsa true qaytaradi
//    if (arr[0] == 1 && arr[1] == 1) {
//         return true;    }
//    if (arr[length-2] == 1 && arr[length-1] == 1) {
//            return true;    }
//    return false;}
//
//
//    int main() {
//        int arr[] = {1, 3, 4, 5};
//        int length = sizeof(arr) / sizeof(arr[0]);
//         if (unlucky1(arr, length)) {
//                cout << "true";    }
//         else {        cout << "false";
//         }
//           return 0;}

       //66-mashq

//       Toq uzunlikdagi massiv berilgan. Massivni birinchi,
//       oxirgi va o’rtasidagi elementlarini solishtiring va eng kattasini qaytaring.
//       maxTriple([1, 2, 3]) → 3
//       maxTriple([1, 5, 3]) → 5
//       maxTriple([5, 2, 3]) → 5

//    int maxTriple(int arr[], int n) {
//    int first = arr[0];
//    int middle = arr[n/2];
//    int last = arr[n-1];
//    return max(max(first, middle), last);
//}
//
//int main() {
//    int n = 3;
//    int arr[n] = {1, 2, 3};
//
//    int result = maxTriple(arr, n);
//
//    cout << "Natija: " << result << endl;
//
//    return 0;
//}


        //65-mashq

//        Toq uzunlikdagi array berilgan. O’rtadagi 3ta
//        elementdan iborat yangimassivni qaytaring.
//        midThree([1, 2, 3, 4, 5]) → [2, 3, 4]
//        midThree([8, 6, 7, 5, 3, 0, 9]) → [7, 5, 3]
//        midThree([1, 2, 3]) → [1, 2, 3]



//        int* midThree(int arr[], int n) {
//    int middle = n / 2 - 1;
//    int* result = new int[3];
//    result[0] = arr[middle];
//    result[1] = arr[middle+1];
//    result[2] = arr[middle+2];
//    return result;
//}
//
//int main() {
//    int n = 5;
//    int arr[n] = {1, 2, 3, 4, 5};
//
//    int* result = midThree(arr, n);
//
//    cout << "Natija: [";
//    for (int i = 0; i < 3; i++) {
//        cout << result[i];
//        if (i != 2) {
//            cout << ", ";
//        }
//    }
//    cout << "]" << endl;
//
//    return 0;
//}



       //64-mashq

//       Int tipida array berilgan. Arrayni birinchi va oxirgi
//       elementlarini almashtiringva qaytaring.
//       swapEnds([1, 2, 3, 4]) → [4, 2, 3, 1]
//       swapEnds([1, 2, 3]) → [3, 2, 1]
//       swapEnds([8, 6, 7, 9, 5]) → [5, 6, 7, 9, 8]



//       int* swapEnds(int arr[], int n) {
//    int* result = new int[n];
//    result[0] = arr[n-1];
//    for (int i = 1; i < n-1; i++) {
//        result[i] = arr[i];
//    }
//    result[n-1] = arr[0];
//    return result;
//}
//
//int main() {
//    int n = 4;
//    int arr[n] = {1, 2, 3, 4};
//
//    int* result = swapEnds(arr, n);
//
//    cout << "Natija: [";
//    for (int i = 0; i < n; i++) {
//        cout << result[i];
//        if (i != n-1) {
//            cout << ", ";
//        }
//    }
//    cout << "]" << endl;
//
//    return 0;
//}
//



       // 63-mashq

//       Uzunligi 2 bolgan 2ta int tipida a va b massiv berilgan. Uzunligi 4 bolgan yangi
//       massiv elementlari a va b massiv elementlaridan iborat. Yangi massivniqaytaring.
//       plusTwo([1, 2], [3, 4]) → [1, 2, 3, 4]
//       plusTwo([4, 4], [2, 2]) → [4, 4, 2, 2]
//       plusTwo([9, 2], [3, 4]) → [9, 2, 3, 4]

//    int* plusTwo(int a[], int b[]) {
//    int* result = new int[4];
//    result[0] = a[0];
//    result[1] = a[1];
//    result[2] = b[0];
//    result[3] = b[1];
//    return result;
//}
//
//int main() {
//    int a[2] = {4, 5};
//    int b[2] = {6, 7};
//
//    int* result = plusTwo(a, b);
//
//    cout << "Natija: [";
//    for (int i = 0; i < 4; i++) {
//        cout << result[i];
//        if (i != 3) {
//            cout << ", ";
//        }
//    }
//    cout << "]" << endl;
//
//    return 0;
//}



       //62-mashq

//       Juft uzunlikdagi int tipida massiv berilgan. O’rtadagi 2ta
//       elementdan iboratyangi massivni qaytaring.
//       makeMiddle([1, 2, 3, 4]) → [2, 3]
//       makeMiddle([7, 1, 2, 3, 4, 9]) → [2, 3]
//       makeMiddle([1, 2]) → [1, 2]

//      int* makeMiddle(int arr[], int n) {
//    int middle = n / 2 - 1;
//    int* result = new int[2];
//    result[0] = arr[middle];
//    result[1] = arr[middle+1];
//    return result;
//}
//
//int main() {
//    int n = 4;
//    int arr[n] = {1, 2, 3, 4};
//
//    int* result = makeMiddle(arr, n);
//
//    cout << "Natija: [";
//    for (int i = 0; i < 2; i++) {
//        cout << result[i];
//        if (i != 1) {
//            cout << ", ";
//        }
//    }
//    cout << "]" << endl;
//
//    return 0;
//}



   //61-mashq

//   uzunligi 2 bolgan int tipida 2ta a va b massiv berilgan. Qaysi massivni
//   elementlarini yigindisi katta bolsa, osha massivni qaytaring. Teng bolsa, a
//   massivni qaytaring.
//   biggerTwo([1, 2], [3, 4]) → [3, 4]
//   biggerTwo([3, 4], [1, 2]) → [3, 4]
//   biggerTwo([1, 1], [1, 2]) → [1, 2]

//int* biggerTwo(int a[], int b[]) {
//    int sumA = a[0] + a[1];
//    int sumB = b[0] + b[1];
//    if (sumA >= sumB) {
//        return a;
//    } else {
//        return b;
//    }
//}
//
//int main() {
//    int a[] = {1, 2};
//    int b[] = {3, 4};
//    int* result = biggerTwo(a, b);
//    cout << "[" << result[0] << ", " << result[1] << "]" << endl;
//    return 0;
//}



   //60-mashq


//   int tipida uzunligi 3 bolgan massiv berilgan. Agar massivda 2 elementidankeyin 3
//   elementi kelsa 3 elementini 0 ga almashtiring va qaytaring.
//   fix23([1, 2, 3]) → [1, 2, 0]
//   fix23([2, 3, 5]) → [2, 0, 5]
//   fix23([1, 2, 1]) → [1, 2, 1]


//int main()
//{
//    int arr[] = {2, 3, 4, 5, 2, 3, 3, 2, 3};
//    for (int i = 0; i < 9; i++) {
//        if (arr[i] == 2 && arr[i + 1] == 3)
//            arr[i + 1] = 0;
//    }
//    for (int i = 0; i < 9; i++)
//    {
//        cout << arr[i] << " ";
//    }
//    return 0;
//}
//



   //59-mashq

//   Int tipida a massiv berilgan. Yangi massiv a massivni uzunligidan 2marta kopva
//   yangi massivni oxirgi elementi a massivni oxirgi elementiga teng. Yangi massivni
//   qolgan elementlari 0 ga teng. Yangi massivni qaytaring. Note: int tipidagi
//   massivni elementlarining default (boshlang’ich) qiymati doim 0 ga teng.
//   makeLast([4, 5, 6]) → [0, 0, 0, 0, 0, 6]
//   makeLast([1, 2]) → [0, 0, 0, 2]
//   makeLast([3]) → [0, 3]

//    int main() {
//    int a[3];
//    cout << "Massiv elementlarini kiriting:\n";
//    for (int i = 0; i < 3; i++) {
//        cout << i+1 << "-chi elementni kiriting: ";
//        cin >> a[i];
//    }
//
//    int new_arr[6] = {0, 0, 0, 0, 0, a[2]};
//
//    cout << "Yangi massiv: ";
//    for (int i = 0; i < 6; i++) {
//        cout << new_arr[i] << " ";
//    }
//    cout << endl;
//
//    return 0;
//}






   // 58-mashq

//   Int tipida uzunligi 3 bolgan 2ta a va b massiv berilgan. shu massivlarnio’rtasidagi
//   elementlaridan iborat yangi massivni qaytaring.
//   middleWay([1, 2, 3], [4, 5, 6]) → [2, 5]
//   middleWay([7, 7, 7], [3, 8, 0]) → [7, 8]
//   middleWay([5, 2, 9], [1, 4, 5]) → [2, 4]

//      int main() {
//    int a[3], b[3];
//    cout << "1-massiv elementlarini kiriting:\n";
//    for (int i = 0; i < 3; i++) {
//        cout << i+1 << "-chi elementni kiriting: ";
//        cin >> a[i];
//    }
//    cout << "2-massiv elementlarini kiriting:\n";
//    for (int i = 0; i < 3; i++) {
//        cout << i+1 << "-chi elementni kiriting: ";
//        cin >> b[i];
//    }
//
//    int new_arr[2] = {a[1], b[1]};
//
//    cout << "Yangi massiv: ";
//    for (int i = 0; i < 2; i++) {
//        cout << new_arr[i] << " ";
//    }
//    cout << endl;
//
//    return 0;
//}



     //57-mashq

//     Int tipida uzunligi 3 bolgan massiv berilgan. Massivni birinchi va oxirgi elementini
//     solishtirib, kattasini toping va massivni barcha elementlarinishukatta songa
//     almashtiring. Natijani qaytaring.
//     maxEnd3([1, 2, 3]) → [3, 3, 3]
//     maxEnd3([11, 5, 9]) → [11, 11, 11]
//     maxEnd3([2, 11, 3]) → [3, 3, 3]


//     int main() {
//    int a[3];
//    cout << "Massiv elementlarini kiriting:\n";
//    for (int i = 0; i < 3; i++) {
//        cout << i+1 << "-chi elementni kiriting: ";
//        cin >> a[i];
//    }
//
//    int temp = a[0];
//    a[0] = a[2];
//    a[2] = temp;
//
//    int max = a[0];
//    for (int i = 1; i < 3; i++) {
//        if (a[i] > max) {
//            max = a[i];
//        }
//    }
//
//    for (int i = 0; i < 3; i++) {
//        a[i] = max;
//    }
//
//    cout << "Yangi massiv: ";
//    for (int i = 0; i < 3; i++) {
//        cout << a[i] << " ";
//    }
//    cout << endl;
//
//    return 0;
//}



     //56-mashq

//     Int tipida uzunligi 3 bolgan massiv berilgan.
//     Massivni teskari qilib (aylantirib)qaytaring.
//     reverse3([1, 2, 3]) → [3, 2, 1]
//     reverse3([5, 11, 9]) → [9, 11, 5]
//     reverse3([7, 0, 0]) → [0, 0, 7]


//     int main() {
//    int a[3];
//    cout << "Massiv elementlarini kiriting:\n";
//    for (int i = 0; i < 3; i++) {
//        cout << i+1 << "-chi elementni kiriting: ";
//        cin >> a[i];
//    }
//
//    int temp = a[0];
//    a[0] = a[2];
//    a[2] = temp;
//
//    cout << "Yangi massiv: ";
//    for (int i = 0; i < 3; i++) {
//        cout << a[i] << " ";
//    }
//    cout << endl;
//
//    return 0;
//}



      //55-mashq

//      Int tipida uzunligi 3 bolgan massiv berilgan. Massivni birinchi
//      elementini olib oxiriga qoying va natijani qaytaring.
//      rotateLeft3([1, 2, 3]) → [2, 3, 1]
//      rotateLeft3([5, 11, 9]) → [11, 9, 5]
//      rotateLeft3([7, 0, 0]) → [0, 0, 7]

//    int main() {
//    int a[3];
//    cout << "Massiv elementlarini kiriting:\n";
//    for (int i = 0; i < 3; i++) {
//        cout << i+1 << "-chi elementni kiriting: ";
//        cin >> a[i];
//    }
//
//    int temp = a[0];
//    a[0] = a[1];
//    a[1] = a[2];
//    a[2] = temp;
//
//    cout << "Yangi massiv: ";
//    for (int i = 0; i < 3; i++) {
//        cout << a[i] << " ";
//    }
//    cout << endl;
//
//    return 0;
//}
//



       //54-mashq

//       2ta int tipida a va b massiv berilgan. Agar ularni birinchi elementlari yokioxirgi
//       indekslaridagi elementlari teng bolsa, true qaytaring.
//       commonEnd([1, 2, 3], [7, 3]) → true
//       commonEnd([1, 2, 3], [7, 3, 2]) → false
//       commonEnd([1, 2, 3], [1, 3]) → true

//   bool commonEnd(int a[], int b[], int sizeA, int sizeB) {
//    if(a[0] == b[0] || a[sizeA-1] == b[sizeB-1]) {
//        return true;
//    } else {
//        return false;
//    }
//}
//
//int main() {
//    int arr1[] = {1, 2, 3};
//    int arr2[] = {7, 3};
//    int size1 = sizeof(arr1)/sizeof(arr1[0]);
//    int size2 = sizeof(arr2)/sizeof(arr2[0]);
//    cout << commonEnd(arr1, arr2, size1, size2) << endl;
//
//    int arr3[] = {1, 2, 3};
//    int arr4[] = {7, 3, 2};
//    int size3 = sizeof(arr3)/sizeof(arr3[0]);
//    int size4 = sizeof(arr4)/sizeof(arr4[0]);
//    cout << commonEnd(arr3, arr4, size3, size4) << endl;
//
//    int arr5[] = {1, 2, 3};
//    int arr6[] = {1, 3};
//    int size5 = sizeof(arr5)/sizeof(arr5[0]);
//    int size6 = sizeof(arr6)/sizeof(arr6[0]);
//    cout << commonEnd(arr5, arr6, size5, size6) << endl;
//
//    return 0;
//}
//



       //53-mashq

//       Int lardan iborat massiv berilgan. Massivni 1inchi yoki oxirgi elementi 6bolsa,
//       true qaytaring.
//       firstLast6([1, 2, 6]) → true
//       firstLast6([6, 1, 2, 3]) → true
//       firstLast6([13, 6, 1, 2, 3]) → false



//    bool firstLast6(int arr[], int size) {
//    if(arr[0] == 6 || arr[size-1] == 6) {
//        return true;
//    } else {
//        return false;
//    }
//}
//
//int main() {
//    int arr1[] = {1, 2, 6};
//    int size1 = sizeof(arr1)/sizeof(arr1[0]);
//    cout << firstLast6(arr1, size1) << endl;
//
//    int arr2[] = {6, 1, 2, 3};
//    int size2 = sizeof(arr2)/sizeof(arr2[0]);
//    cout << firstLast6(arr2, size2) << endl;
//
//    int arr3[] = {13, 6, 1, 2, 3};
//    int size3 = sizeof(arr3)/sizeof(arr3[0]);
//    cout << firstLast6(arr3, size3) << endl;
//
//    return 0;
//}




     //52-mashq

//     Satr berilgan(str.length() > 2). Ushbu satrda uchragan barcha “y” harflarini
//     o’chirilgan holatda qaytaring. Agar satrning nolinchi va oxirgi indeksi “y” bo’lsa,ular
//     o’chirilmasin.
//     str = “yyHyiy” -> str = “xHix”
//     str = “abyyycd” -> str = “abcd”


//   string remove_y(string str) {
//    for (int i = 1; i < str.length() - 1; i++) {
//        if (str[i] == 'y') {
//            str.erase(i, 1);
//            i--;
//        }
//    }
//    if (str.length() > 2 && str[0] == 'y' && str[str.length() - 1] == 'y') {
//        str[0] = 'x';
//        str[str.length() - 1] = 'x';
//    }
//    return str;
//}
//
//int main() {
//    string str = "yyHyiy";
//    cout << "Original string: " << str << endl;
//    string new_str = remove_y(str);
//    cout << "New string: " << new_str << endl;
//
//    str = "abyyycd";
//    cout << "Original string: " << str << endl;
//    new_str = remove_y(str);
//    cout << "New string: " << new_str << endl;
//
//    return 0;
//}



     //51-mashq

//     Ixtiyoriy sonlardan iborat arr[10] massivi berilgan. Agar ushbu massivda
//     3 soni roppa rosa 3 marta qatnashgan bo’lsa va 3 soni yonma yon kelmaganbo’lsa
//     true qiymat qaytaring.
//     {7, 3, 9, 2, 3, 6, 11, 4, 3, 8} -> true
//     {7, 3, 9, 3, 3, 6, 11, 4, 8} -> false


//int main() {
//    int arr[10] = {7, 3, 9, 2, 3, 6, 11, 4, 3, 8};
//    bool flag = true;
//
//    int count = 0;
//    for(int i = 0; i < 10; i++) {
//        if(arr[i] == 3) {
//            count++;
//        } else {
//            count = 0;
//        }
//
//        if(count == 3) {
//            flag = false;
//            break;
//        }
//    }
//
//    if(flag) {
//        cout << "true" << endl;
//    } else {
//        cout << "false" << endl;
//    }
//
//    return 0;
//}







     //50-mashq

//    n ta butun sonli massiv berilgan. (n>5) Massivning dastlabki 2 ta va oxirgi 3 ta
//    elementlarini yig’indisini aniqlovchi dastur tuzing.


//
//int main() {
//    const int n = 6;
//    int array[n] = {2, 4, 5, 2, 5, 3};
//
//    int sum = array[0] + array[1] + array[n-3] + array[n-2];
//
//    cout << "Sum of first 2 and last 3 elements: " << sum << endl;
//
//    return 0;
//}
//
//






     // 49-mashq

//     N ta butun sondan tashkil topgan ikkita array1 va array2 massiv berilgan. array1
//     va array2 massivlarning mos elementlarini ayirmasidanhosil bo’lgan yangi array3
//     massiv hosil qiling va natijani ekranga chiqaring.
//     Input: Output:
//     array1 = [2,4,5,2,5,3]
//     array2 = [2,4,5,4,6,7]        array3 = [0,0,0,-2,-1,-4]
//     array1 = [13,0,5,70,3,5]
//     array2 = [3,6,5,7,3,5]        array3 = [10,-6,0,63,0,0]


//     int main() {
//    const int n = 6;
//    int array1[n] = {2, 4, 5, 2, 5, 3};
//    int array2[n] = {2, 4, 5, 4, 6, 7};
//    int array3[n];
//
//    for(int i=0; i<n; i++) {
//        array3[i] = array1[i] - array2[i];
//    }
//
//    cout << "array3 = [";
//    for(int i=0; i<n; i++) {
//        cout << array3[i];
//        if(i != n-1) {
//            cout << ",";
//        }
//    }
//    cout << "]" << endl;
//
//    return 0;
//}



     //48-mashq


//     n ta butun sonli massiv berilgan. Bunda har bir element 1 yoki 4 dan tashkil
//     topgan bo'lsa, true qiymatini chiqaruvchi dastur tuzing
//     Input:                           Output:
//     [1, 4, 1, 4]                      true
//     [1, 4, 2, 4]                      false
//     [1, 1, 1, 4, 4, 4, 1, 1, 4, 1]    true

//
//      int main() {
//    const int n = 4;
//    int a[n] = {1, 4, 2, 4};
//    bool flag = true;
//
//    for(int i=0; i<n; i++) {
//        if(a[i] != 1 && a[i] != 4) {
//            flag = false;
//            break;
//        }
//    }
//
//    if(flag) {
//        cout << "true" << endl;
//    } else {
//        cout << "false" << endl;
//    }
//
//    return 0;
//}





     //47-mashq

//     n ta butun sondan iborat massiv berilgan. Massivdagi birinchi o’rindagisondan
//     kichik bo’lgan barcha sonlarni yig’indisini topadigan dastur tuzing.


//     int main() {
//    const int n = 6;
//    int a[n] = {7, 4, 5, 2, 9, 3};
//    int sum = 0;
//
//    for(int i=1; i<n; i++) {
//        if(a[i] < a[0]) {
//            sum += a[i];
//        }
//    }
//
//    cout << "Natija: " << sum << endl;
//
//    return 0;
//}





     //46-mashq

//     n ta butun sondan iborat massiv va k1, k2 sonlari berilgan(k1<k2). Sizning
//     vazifangiz k1 indexdan k2 indexgacha bo’lgan barcha sonlarni ko’paytirib natijani
//     qaytarish.
//     Input:                              Output:
//     Array= [2,4,5,2,5,3] , k1=3, k2=5     30
//     Array= [3,4,5,6,6,4] , k1=0, k2=1     12
//     Array= [4,5,6,7,5,7] , k1=0, k2=4     4200


//int main() {
//    int k1 = 0, k2 = 1;
//    int array[] = {3, 4, 5, 6, 6, 4};
//    int product = 1;
//
//    for (int i = k1; i <= k2; i++) {
//        product *= array[i];
//    }
//
//    cout << "Natija: " << product << endl;
//    return 0;
//}



     // 45-mashq

//     n ta elementdan butun sonli 1 o’lchamli massiv va k son berilgan. (n>k)
//     Massivdagi k indexda turgan elementdan bitta oldingi va bitta keyingi
//     elementlarni yig’indisini aniqlovchi dastur tuzing.


//int main() {
//    const int n = 10; // massiv o'lchami
//    int k = 3; // k index
//    int a[n] = {3, -5, 2, -8, 7, 0, -4, 6, -1, 9}; // massiv
//    int sum = a[k-1] + a[k+1]; // k indexdagi elementdan oldingi va keyingi elementlar yig'indisi
//
//    cout << "K indexdagi elementdan oldingi va keyingi elementlar yig'indisi: " << sum << endl;
//
//    return 0;
//}
//
//





       //44-mashq

//       N ta butun sondan iborat massiv berilgan. Shu massivda nechta
//       juft, nechta toq son borligini aniqlovchi dastur tuzing.

//    int main() {
//    const int n = 10; // massiv o'lchami
//    int a[n] = {3, 5, 2, 8, 7, 0, 4, 6, 1, 9}; // massiv
//    int evenCount = 0; // juft sonlar soni
//    int oddCount = 0; // toq sonlar soni
//
//    for (int i = 0; i < n; i++) {
//        if (a[i] % 2 == 0) { // juft sonlarni topish
//            evenCount++;
//        } else { // toq sonlarni topish
//            oddCount++;
//        }
//    }
//
//    cout << "Massivdagi juft sonlar soni: " << evenCount << endl;
//    cout << "Massivdagi toq sonlar soni: " << oddCount << endl;
//
//    return 0;
//}









        //43-mashq


//        Berilgan butun sonlardan iborat bir o’lchovli massivdagi manfiy toq sonlar
//        nechaligini topadigan dastur tuzing. n ta butun sonlardan iborat massivdagi 25
//        dan katta toq sonlar necha ekanligini toping.

//int main() {
//    const int n = 10; // massiv o'lchami
//    int a[n] = {3, -5, 2, -8, 7, 0, -4, 6, -1, 9}; // massiv
//    int count = 0; // toq sonlar soni
//
//    for (int i = 0; i < n; i++) {
//        if (a[i] < 0 && a[i] % 2 != 0) { // manfiy toq sonlarni topish
//            count++;
//        }
//    }
//
//    cout << "Massivdagi 25 dan katta toq sonlar soni: " << count << endl;
//
//    return 0;
//}




        //42-mashq

//          N ta butun sonlardan iborat massiv berilgan. Massivdagi har bir juft sonni 2 ga
//          orttiruvchi programma tuzilsin. Agar juft sonlar bo'lmasa, massiv o'zgarishsiz
//          qoldirilsin.
//           Input:           Output:
//         [2,4,5,2,5,3]  [4,6,5,4,5,3]
//         [3,4,5,6,6,40] [3,6,5,8,8,42]

//int main() {
//  const int N = 5;
//  int a[N] = { 1, 2, 3, 4, 5 };
//  bool is_modified = false;
//
//  for (int i = 0; i < N; i++) {
//    if (a[i] % 2 == 0) {
//      a[i] *= 2;
//      is_modified = true;
//    }
//  }
//
//  if (is_modified) {
//    std::cout << "Modified array: ";
//    for (int i = 0; i < N; i++) {
//      std::cout << a[i] << " ";
//    }
//    std::cout << std::endl;
//  } else {
//    std::cout << "No even numbers in array" << std::endl;
//  }
//
//  return 0;
//}
//


       //41-mashq

//       N ta butun sondan tashlik topgan array1[] butun sonlar massivi berilgan.
//       Massivdagi toq sonlar ko’paytmasidan juft sonlar yig’indisini ayirib natijani
//       chiqaruvchi dastur tuzing.


//    int main() {
//    srand(time(NULL));
//    int n;
//    cout << "Enter the size of the array: ";
//    cin >> n;
//    int arr[n];
//    cout << "The array is: ";
//    for(int i=0; i<n; i++) {
//        arr[i] = rand() % 30 + 1;
//        cout << arr[i] << " ";
//    }
//    cout << endl << "Sum of even numbers in the array is: ";
//    int sum = 0;
//    int product = 1;
//    for(int i=0; i<n; i++) {
//        if(arr[i] % 2 == 0) {
//            sum += arr[i];
//        }
//        else if (arr[i] % 2 != 0) {
//                product *= arr[i];
//                }
//    }
//    cout <<"Massivdagi toq sonlar ko'paytmasidan juft sonlar yig'indisni ayirganda natija: "<<product-sum << endl;
//
//    return 0;
//}





       // 40-mashq

//       Uzunligi N ga teng bo'lgan massiv yarating. [0-10] gacha bo'lgan sonlar bilan
//       to'ldiring(rand() orqali). Massiv elementlari orasida o‘zidan keyingi qo’shnisidan
//       katta bo‘lgan sonlar miqdori topuvchi dastur tuzing.

////       int main() {
////    srand(time(NULL));
////    int N;
////    cout << "Enter the length of the array: ";
////    cin >> N;
////    int arr[N];
////    cout << "Array elements: ";
////    for (int i = 0; i < N; i++) {
////        arr[i] = rand() % 11; // [0-10] gacha bo'lgan sonlar
////        cout << arr[i] << " ";
////    }
////    cout << endl;
////    int count = 0;
////    for (int i = 0; i < N - 1; i++) {
////        if (arr[i+1] > arr[i]) { // o‘zidan keyingi qo’shnisidan katta bo‘lgan sonlar
////            count++;
////        }
////    }
////    cout << "Number of elements larger than their next element: " << count << endl;
////    return 0;
////}






       // 39-mashq

//       Uzunligi N ga teng bo'lgan massiv yarating. [1-30] gacha bo'lgan sonlar bilan
//       to'ldiring(rand() orqali). Massiv da uchragan barcha tub sonlarni ekranga
//       chiqaruvchi dastur tuzing.
//
//       bool isPrime(int num) {
//    if(num <= 1) {
//        return false;
//    }
//    for(int i=2; i<num; i++) {
//        if(num % i == 0) {
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    srand(time(NULL));
//    int n;
//    cout << "Enter the size of the array: ";
//    cin >> n;
//    int arr[n];
//    cout << "The array is: ";
//    for(int i=0; i<n; i++) {
//        arr[i] = rand() % 30 + 1;
//        cout << arr[i] << " ";
//    }
//    cout << endl << "Prime numbers in the array are: ";
//    for(int i=0; i<n; i++) {
//        if(isPrime(arr[i])) {
//            cout << arr[i] << " ";
//        }
//    }
//    cout << endl;
//    return 0;
//}
















        //38-mashq

//        n ta butun sonli massiv berilgan. Massivdagi eng katta son nechanchi indexda
//        turganligini aniqlaydigan dastur tuzilsin.

//    int findMaxIndex(int arr[], int n) {
//    int maxIndex = 0;
//    for(int i=1; i<n; i++) {
//        if(arr[i] > arr[maxIndex]) {
//            maxIndex = i;
//        }
//    }
//    return maxIndex;
//}
//
//int main() {
//    int n;
//    cout << "Enter the size of the array: ";
//    cin >> n;
//    int arr[n];
//    cout << "Enter " << n << " integers: ";
//    for(int i=0; i<n; i++) {
//        cin >> arr[i];
//    }
//    int maxIndex = findMaxIndex(arr, n);
//    cout << "The largest integer in the array is at index " << maxIndex << endl;
//    return 0;
//}




        // 37-mashq
//      Konsoldan kiritilgan N soni asosida quyidagi shaklga mos sonlarni chiqaruvchi
//      funksiya yordamida dastur tuzing. Ma’lumot uchun: N nechaga teng bo’lsa
//      sonlar shundan boshlanadi
//      Masalan:N=5
//      5 6 7 8 9
//      5 6 7 8
//      5 6 7
//      5 6
//      5









       //  36-mashq

//           n butun soni berilgan. Quyidagi yig’indini hisoblovchi funksiya yordamida dastur
//           tuzilsin:S = 1.1 - 1.2 + 1.3 - … (n ta qo’shiluvchi, ishoralar almashib keladi)

//    double calculateSum(int n) {
//    double sum = 0.0;
//    int sign = 1;
//    for(int i=1; i<=n; i++) {
//        sum += sign * (i * 0.1);
//        sign *= -1;
//    }
//    return sum;
//}
//
//int main() {
//    int n;
//    cout << "Enter a number: ";
//    cin >> n;
//    double sum = calculateSum(n);
//    cout << "The sum is: " << sum << endl;
//    return 0;
//}
//



        // 35-mashq


//        n butun soni berilgan. Quyidagi ko’paytmani hisoblovchi funksiya yordamida
//        dastur tuzilsin:S = 1.1 * 1.2 * 1.3 * … (n ta ko’paytuvchi)
//


//
//    double calculateProduct(int n) {
//    double product = 1.0;
//    for (int i = 1; i <= n; i++) {
//        product *= (1.0 + (i / 10.0));
//    }
//    return product;
//}
//
//int main() {
//    int n;
//    cout << "Enter a number: ";
//    cin >> n;
//    double result = calculateProduct(n);
//    cout << "The product of (1.1 * 1.2 * 1.3 * ... * " << n << ") is " << result << endl;
//    return 0;
//}
//
//





         //34-mashq

//           N natural soni berilgan. Uning mukammal yoki mukammal emasligini aniqlovchi
//           funksiya yordamida dastur tuzing. Mukammal sonlar - oʻzidan tashqari barcha
//           bo’luvchilari yig’indisi shu sonni o’ziga teng natural sonlar.
//           Masalan: 6=1+2+3, 28=1+2+4+7+14



//    bool isPerfect(int num) {
//    int sum = 0;
//    for (int i = 1; i <= num / 2; i++) {
//        if (num % i == 0) {
//            sum += i;
//        }
//    }
//    return (sum == num);
//}
//
//int main() {
//    int n;
//    cout << "Enter a number: ";
//    cin >> n;
//    if (isPerfect(n)) {
//        cout << n << " is a perfect number" << endl;
//    } else {
//        cout << n << " is not a perfect number" << endl;
//    }
//    return 0;
//}



           //33-mashq


      //     Foydalanuvchi tomonidan kiritilgan N soni asosida quyidagi shaklga mossonlarni
      //     chiqaruvchi funksiya yordamida dastur tuzing. Misol: N=5

      //       1
      //       2 2
      //       3 3 3
      //       4 4 4 4
      //       5 5 5 5 5

//    void printPattern(int n) {
//    for (int i=1; i<=5; ++i) {
//            for(int j=1; j<=i; ++j) {
//                cout<<i;
//            }
//            cout<<endl;
//         }
//    }
//
//    int main() {
//    int n;
//    cout << "N ni kiriting: ";
//    cin >> n;
//
//    printPattern(n);
//
//    return 0;
//}






           //32-mashq

//           Foydalanuvchi tomonidan kiritilgan N soni asosida quyidagi
//           shaklga mos belgilarni chiqaruvchi funksiya tuzing,
//           Misol: N=5

//     void printPattern(int n) {
//
//     for (int i = n; i >= -n; i--) {
//     for (int j = n; j >= abs(i); j--) {
//     cout << "+";
//     }
//     cout << endl;
//     }
//     }
//
//    int main() {
//    int n;
//    cout << "N ni kiriting: ";
//    cin >> n;
//
//    printPattern(n);
//
//    return 0;
//}






          //31-mashq



//        Foydalanuvchi tomonidan kiritilgan N soni asosida quyidagi shaklga mos
//        belgilarni chiqaruvchi funksiya tuzing,
//        Misol: N=5
//        5
//        55
//        555
//        5555
//        55555

//     void printPattern(int n) {
//
//     for (int i = 1; i <= n; i++) {
//     for (int j = 1; j <= i; j++) {
//     cout << "5";
//     }
//     cout << endl;
//     }
//     }
//
//    int main() {
//    int n;
//    cout << "N ni kiriting: ";
//    cin >> n;
//
//    printPattern(n);
//
//    return 0;
//}




     //30-mashq

//       Foydalanuvchi tomonidan ikkita a va b sonlari kirtiladi. Kirtilgan sonlarning
//       EKUK(a, b) ni xisoblovchi funksiya yordamida dastur tuzilsin.
//       Misol uchun: a = 10, b = 5 Natija: EKUK (a, b) = 10

//
//    int EKUK (int a, int b)
//{
//   if (a == 0)
//      return b;
//
//   while (b != 0)
//   {
//       if (a > b)
//           a = a - b;
//       else
//           b = b - a;
//   }
//
//   return a;
//}
//
//



    // 29-MASHQ

//       a va n sonlari berilgan. a ni n chi darajasini aniqlovchi funksiya yordamida dastur
//       tuzing. Matematik kutbxona funksiyalari ishlatilmasin, takrorlanuvchi
//       algoritmdan foydalaning.
//

//      int daraja(int a, int n) {
//    if (n == 0) {
//        return 1;
//    }
//    return a * daraja(a, n - 1);
//}
//
//int main() {
//    int a, n;
//    cout << "a sonini kiriting: ";
//    cin >> a;
//    cout << "n darajasi: ";
//    cin >> n;
//    cout << a << " ning " << n << " darajasi: " << daraja(a, n) << endl;
//    return 0;
//}



      // 28-MASHQ

      // Konsoldan kiritilgan N soni asosida quyidagi shaklni chiqaruvchi funksiya
      //  yordamida dastur tuzing, Misol: N=4

//       void printPattern(int n) {
//     for (int i=1; i<=n; i++) {
//            for (int j=1; j<=n; j++) {
//                if ((j==1 || j==n) || (i==1 || i==n))
//                    cout<<"%";
//                else cout<<" ";
//            }
//            cout<<endl;
//       }
//       }
//
//   int main() {
//    int n;
//    cout << "Enter a number: ";
//    cin >> n;
//    printPattern(n);
//    return 0;
//}





       //27-MASHQ


//       Foydalanuvchi tamonidan ikkita a va b sonlari kirtiladi. Kirtilgan sonlarning
//       EKUB(a, b) ni xisoblovchi funksiya yordamida dastur tuzilsin.
//       Misol uchun: a = 12, b = 15 Natija: EKUB(a, b) = 3


//       int EKUB(int a, int b) {
//       if (b == 0) {
//        return a;
//       }
//        return EKUB(b, a % b);
//}
//
//int main() {
//    int a, b;
//    cout << "Enter two numbers: ";
//    cin >> a >> b;
//    cout << "EKUB(" << a << ", " << b << ") = " << EKUB(a, b) << endl;
//    return 0;
//}


//2-VARIANT

// int EKUB(int a, int b)
//{
//    if (a == 0)
//        return b;
//
//    while (b != 0)
//    {
//        if (a > b)
//            a = a - b;
//        else
//            b = b - a;
//    }
//    return a;
//}
//
//int main()
//{
//    int a = 12, b = 15;
//    cout << "EKUB(" << a << ", " << b << ") = " << EKUB(a, b);
//    return 0;
//}
//
//


       // 26-MASHQ

     //  a va b butun sonlari berilgan(b>1). a sonini b marta ekranga chiqaruvchi funksiya
     //  yordamida dastur tuzing.

//     int printA(int a, int b)
//{
// for (int i=0; i<b; i++)
//  cout << a << " ";
//}
//
//int main()
//{
// int a = 5, b = 10;
// printA(a, b);
// return 0;
//}
//
//




     // 25-mashq

   //  n sonigacha bo’lgan barcha tub sonni ekranga chiqaradigan dastur tuzing

//  bool tub_sonmi(int n) {
//    if (n < 2) {
//        return false;
//    }
//    for (int i = 2; i <= sqrt(n); i++) {
//        if (n % i == 0) {
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    int start, end;
//    cout << "Boshlang'ich sonni kiriting: ";
//    cin >> start;
//    cout << "Oxirgi sonni kiriting: ";
//    cin >> end;
//
//    // Tub sonlarni ekranga chiqarish
//    for (int i = start; i <= end; i++) {
//        if (tub_sonmi(i)) {
//            cout << i << endl;
//        }
//    }
//
//    return 0;
//}

    // 24-mashq

 //   N natural soni berilgan. Uning tub yoki tub emasligini aniqlovchi funksiya
 //   yordamida dastur tuzing. Tub son - bu faqat o‘ziga va 1 ga qoldiqsiz bo‘linadigan
 //   son. (yani bo’luvchilari soni ikkitadan oshmaydigan son).


//    bool tubSon(int n) {
//    if(n < 2) {
//        return false;
//    }
//    for(int i=2; i*i<=n; i++) {
//        if(n % i == 0) {
//            return false;
//        }
//    }
//    return true;
//}
//
//int main() {
//    int n;
//    cout << "Sonni kiriting: ";
//    cin >> n;
//    if(tubSon(n)) {
//        cout << n << " tub son" << endl;
//    } else {
//        cout << n << " tub son emas" << endl;
//    }
//    return 0;
//}





   //23-mashq

    // Konsoldan kiritilgan N soni asosida quyidagi shaklni chiqaruvchi funksiya
    // yordamida dastur tuzing, Misol: N=5 (N >= 3 va toq son deb olinsin)
//           +
//           +
//       + + + + +
//           +
//           +

//   void printPattern(int n) {
//    if(n < 3 || n % 2 == 0) {
//        cout << "Invalid Input" << endl;
//        return;
//    }
//    for(int i=1; i<=n; i++) {
//        for(int j=1; j<=n; j++) {
//            if(i == (n/2)+1 || j == (n/2)+1 ) {
//                cout << "+ ";
//            } else {
//                cout << "  ";
//            }
//        }
//        cout << endl;
//    }
//}
//
//int main() {
//    int n;
//    cout << "Enter a number: ";
//    cin >> n;
//    printPattern(n);
//    return 0;
//}
//




   // 22-mashq

   // Takrorlash operatori orqali 2 dan 9 gacha to’liq karra jadvalni ekranga
   // chiqaruvchi funksiya yordamida dastur tuzing.

//   void printTable() {
//    for(int i=2; i<=9; i++) {
//        for(int j=1; j<=10; j++) {
//            cout << i << " x " << j << " = " << i*j << endl;
//        }
//        cout << endl;
//    }
//}
//
//int main() {
//    printTable();
//    return 0;
//}



    //21-mashq


  //  To‘g’ri burchakli uchburchakning 2 ta katetlari berilgan. Uning gipotenuzasini va
  //  perimetrini aniqlovchi (void) protsedura tuzing. Gipotenuza formulasi:
  //  c = √𝑎2 + 𝑏2


//    void findHypotenuseAndPerimeter(double a, double b) {
//    double c = sqrt(a*a + b*b);
//    double perimeter = a + b + c;
//    cout << "Gipotenuza: " << c << endl;
//    cout << "Perimetr: " << perimeter << endl;
//}
//
//int main() {
//    double a, b;
//    cout << "To'g'ri burchakli uchburchakning 2 katetini kiriting:\n";
//    cin >> a >> b;
//
//    findHypotenuseAndPerimeter(a, b);
//
//    return 0;
//}




    //20-mashq


    //   Foydalanuvchi tomonidan kiritilgan N soni asosida quyidagi shaklga mossonlarni
    //    chiqaruvchi dastur tuzing. Misol: N=5

   // 1
   //   1
   //     1
   //       1
   //         1


//     void printPattern(int n) {
//
//     for (int i = 1; i <= n; i++) {
//     for (int j = 1; j <= n; j++) {
//     if (i == j) {
//     cout << "1";
//     }
//     else
//    {
//     cout << "  ";
//     }
//     }
//     cout << endl;
//     }
//   }
//
//int main() {
//    int n;
//    cout << "N ni kiriting: ";
//    cin >> n;
//
//    printPattern(n);
//
//    return 0;
//}
//




    //19-mashq









   // 18-mashq

    //S sonini natural N darajasini qaytaradigan daraja(S, N) nomli funksiyatuzing.
   // Matematik kutubxona funksiyalaridan foydalanilmasin.
    //yo’nalish: ichma-ich sikllar


    //int daraja(int S, int N) {
   // if (N == 0) {
     //   return 1;
    //}
    //return S * daraja(S, N - 1);
//}

//int main() {
//    int S, N;
//    cout << "S ni kiriting: ";
//    cin >> S;
//    cout << "N ni kiriting: ";
//    cin >> N;
//    cout << S << " ning " << N << " darajasi: " << daraja(S, N) << endl;
//    return 0;
//}



    //17-mashq


   //  sikl operatoridan foydalangan holda barcha 3 xonali sonlar ichida raqamlar
   //  yig’indisi 5 ga teng bo’lgan sonlarni chiqaradigan funksiya yordamida dastur
   //  tuzing. Misol: 104, 113, 122, 203...


//   int isSumOfDigitsFive(int num) {
//    int sum = 0;
//    while (num > 0) {
//        sum += num % 10;
//        num /= 10;
//   }
//    return sum == 5;
//}
//
//int main() {
//    for (int i = 100; i < 1000; i++) {
//        if (isSumOfDigitsFive(i)) {
//            cout << i << endl;
//        }
//    }
//    return 0;
//}




  //  16-MASHQ


  /*
  void printNumbers() {
    for (int i = 10; i < 100; i++) {
        int sum = (i % 10) + (i / 10); // raqamlar yig'indisi
        if (sum == 9 || sum == 15) { // 9 ga yoki 15 ga teng bo'lgan sonlar
            cout << i << endl;
        }
    }
}

int main() {
    printNumbers();
    return 0;
}

*/




    //15-MASHQ

  //  Barcha 3 xonali sonlar ichida kamida 2 ta raqami bir xil bo’lgan sonlarni
  //  chiqaradigan funksiya yordamida dastur tuzing.
  //  Misol: 100,101,111,121,122,303...

//   bool hasSameDigits(int num) {
//    int digit1 = num % 10;
//    num /= 10;
//    int digit2 = num % 10;
//    num /= 10;
//    int digit3 = num % 10;
//    if (digit1 == digit2 || digit1 == digit3 || digit2 == digit3) {
//        return true;
//    }
//    return false;
//}
//
//void printSameDigits() {
//    for (int i = 100; i < 1000; i++) {
//        if (hasSameDigits(i)) {
//            cout << i << " ";
//        }
//    }
//}
//
//int main() {
//    printSameDigits();
//    return 0;
//}
//

   //14-mashq


 // c++ dastur1ash tilida 1 dan n gacha sonlarning kubildizlarini chiqarib beradigan dastur tuzing.


//  int main() {
//    int n;
//    cout << "n ni kiriting: ";
//    cin >> n;
//
//    for (int i = 1; i <= n; i++) {
//        cout << i * i * i << " ";
//    }
//
//    return 0;
//}



    // 13-mashq

    //   1 dollar 11300 so'm. Siznig vazifangiz 10$, 11$, 12$ … va hokazo 40$ ni necha
    //   so’m ekanligini ekranga chiqaruvchi funksiya yordamida dastur tuzish.
    //   (takrorlanuvchi algoritmdan foydalaning)





       /*

    int main()
    {
    float dollar, som;
    float rate = 11300.00;
    for (dollar = 10.00; dollar <= 40.00; dollar++)
    {
        som = dollar * rate;
        cout << dollar << " dollar = " << som << " so'm" << endl;
    }
    return 0;
}

*/



      // 12-mashq

     // 1 dan 100 gacha bo‘lgan toq sonlarni alohida va juft sonlarni alohidaqatorda
    //  ekranga chiqaruvchi funksiya yordamida dastur tuzing.


//
//    void PrintOddEvenNumbers()
//{
// cout << "Odd Numbers:" << endl;
// for (int i = 1; i <= 100; i++)
// {
//  if (i % 2 != 0)
//  {
//   cout << i << endl;
//  }
// }
//
// cout << "Even Numbers:" << endl;
// for (int i = 1; i <= 100; i++)
// {
//  if (i % 2 == 0)
//  {
//   cout << i << endl;
//  }
// }
//}
//
//int main()
//{
// PrintOddEvenNumbers();
//
// return 0;
//}




    /*
    void printEvenOdd(int start, int last)
{
    cout << "Even numbers: ";
    for (int i = start; i <= last; i++) {

        // print even numbers
        if (i % 2 == 0)
            cout << i << " ";
    }

    cout << "\nOdd numbers: ";
    for (int i = start; i <= last; i++) {

        // print odd numbers
        if (i % 2 != 0)
            cout << i << " ";
    }
}

// Driver code
int main()
{
    int start = 1, last = 100;
    printEvenOdd(start, last);
    return 0;
}


*/

       //11-mashq

      // n butun soni berilgan. Quyidagi yig’indini hisoblovchi funksiya
      // yordamida dastur tuzilsin. S = 1 + 1/2 + 1/3 + …1/n.

//       double sum(double n)
//    {
//    double result = 0.0;
//    for (double i = 1; i <= n; i++)
//    {
//        result += 1.0/i;
//    }
//    return result;
//}
//
//int main()
//{
//    double n;
//    cout << "Iltimos, n qiymatini kiriting: ";
//    cin >> n;
//
//    double result = sum(n);
//    cout << "S = " << result << endl;
//
//    return 0;
//}




     //10-mashq


    // Barcha 3 xonali sonlar ichida o’nlar xonasidagi raqam 7 ga yoki 9 ga teng bo’lgan
    // sonlarni ekranga chiqaruvchi funksiya yordamida dastur tuzing

     /*

    // sonlarni ekranga chiqaruvchi funksiya
void printThreeDigitNumberWith7Or9(int n)
{
    int digit = n % 10;

    // sonlar xonasidagi raqam 7 yoki 9 bo'lishi kerak
    if (digit == 7 || digit == 9) {
        cout << n << " ";
    }
}

// barcha 3 xonali sonlarni chiqarish
void printAllThreeDigitNumber()
{
    for (int i = 100; i <= 999; i++)
        printThreeDigitNumberWith7Or9(i);
}

// Boshlash
int main()
{
    cout << "3 xonali sonlar ichida o’nlar xonasidagi raqam 7 yoki 9 bo'lgan sonlar: \n";
    printAllThreeDigitNumber();
    return 0;
}

*/


     //9-mashq

   //  100 dan 900 gacha barcha 3 ga bo’linib 6 ga bo’linmaydigan sonlarni qo’shib
   //  chiqaruvchi funksiya yordamida dastur tuzing.



   /*

    int sumWithoutDividingByThree(int lower, int upper) {
    int sum = 0;
    for (int i = lower; i <= upper; ++i) {
        if (i % 3 != 0) {
            sum += i;
        }
    }
    return sum;
}

int main() {
    int lower = 100;
    int upper = 900;
    int sum = sumWithoutDividingByThree(lower, upper);
    std::cout << "Sum of numbers between " << lower << " and " << upper
              << " that are not divisible by 3: " << sum << std::endl;
    return 0;
}


   */





     //8-mashq

    // 0dan N sonigacha bo’lgan barcha butun sonlarni kvadrat ildizlarini ekranga
    // chiqaruvchi funksiya yordamida dastur tuzing (N>1).



   /*

     void square_root(int n) {
    for (int i = 0; i <= n; i++) {
        cout << "Kvadrat ildiz " << i << " = " << sqrt(i) << endl;
    }
}

int main() {
    int n;
    cout << "N sonini kiriting: ";
    cin >> n;

    if (n > 1) {
        square_root(n);
    } else {
        cout << "N soni 1 dan katta bo'lishi kerak!" << endl;
    }

    return 0;
}

*/




    //7-mashq

   //  Berilgan butun sonning necha xonali ekanligini (sikl operatori orqali) aniqlovchi
   //  funksiya yordamida dastur tuzing. Tayyor funksiyalardan foydalanilmasin




   /*
    int countDigits(int number) {
    int count = 0;
    while(number != 0) {
        number /= 10;
        ++count;
    }
    return count;
}

    int main() {
    int num = 123;
    int numDigits = countDigits(num);
    cout << "Number of digits in " << num << " is " << numDigits << endl;
    return 0;
}

*/

      //6-mashq

      //100 dan 900 gacha barcha 3 ga bo’linib 6 ga bo’linmaydigan sonlarni ekranga
      //chiqaruvchi funksiya yordamida dastur tuzing.

      /*
    void printNumbers() {
    for (int i = 100; i <= 900; i++) {
        if (i % 3 == 0 && i % 6 != 0) {
            cout << i << endl;
        }
    }
}

    int main() {
    printNumbers();
    return 0;
}

*/

       //5-mashq


   // Barcha 2 xonali sonlar ichida raqamlar yig’indisi 5 ga teng bo’lgan sonlarni
  //  chiqaradigan funksiya yordamida dastur tuzing. Raqamlar yig’indisi 5 bo’ladigan
  //  sonlarga misol: 14, 23, 32, 41, 50...

/*

    int sumOfDigits(int n) {
    int sum = 0, rem;
    while(n > 0) {
        rem = n % 10;
        sum += rem;
        n /= 10;
    }
    return sum;
}

void printNumbersWithSumOfDigitsFive() {
    for(int i = 10; i < 100; i++) {
        if(sumOfDigits(i) == 5) {
            cout << i << " ";
        }
    }
}

int main() {
    printNumbersWithSumOfDigitsFive();
    return 0;
}


*/


   //4-mashq

  // Sizga butun N soni beriladi, sizning vazifangiz bu son qandaydir butun sonning
  // kvadrati bo’la oladimi yoki yo’qligini tekshirishdan iborat 200 dan 800 gacha
  // bo’lgan sonlar ichida hamma raqami toq bo’lgan sonlarni chiqaruvchi funksiya
  // yordamida dastur tuzing. (Hamma raqami toq sonlarga misol:301, 313, 333, 357)

/*
    bool kvadratMi(int n) {
    int k = sqrt(n);
    return k * k == n;
}

void toqRaqamlar(int n) {
    for (int i = 200; i <= 800; i++) {
        if (i % 2 == 0) continue; // sadece tek sayıları kontrol ediyoruz
        if (kvadratMi(i) && i * i % n == 0) {
            cout << i << endl;
        }
    }
}

int main() {
    int n;
    cout << "Bir sayi girin: ";
    cin >> n;
    toqRaqamlar(n);
    return 0;
}

*/


   //3-mashq

  // Barcha ikki xonali sonlar ichida o’nlar va birlar xonasidagi raqamlari 1taga farq
  // qiladigan sonlarni chiqaradigan funksiya yordamida dastur tuzing.
  // Masalan: 10, 12, 21, 23, 32, 34…

  /*
void ikkiXonaliSonlar() {
    for(int i=10; i<100; i++) {
        int birlik = i % 10;
        int onlik = i / 10;
        if(birlik - onlik == 1 || onlik - birlik == 1) {
            cout << i << " ";
        }
    }
}

int main() {
    ikkiXonaliSonlar();
    return 0;
}

*/

   //2-mashq

   //1 dan 100 gacha bo‘lgan sonlar ichidan 3 ga bo’linadigan ammo 5 ga
   //bo‘linmaydigan sonlarning yig’indisini hisoblovchi dastur tuzing.


    //int main() {
    //int sum = 0;
    //for(int i=1; i<=100; i++) {
    //    if(i%3 == 0 && i%5 != 0) {
    //        sum += i;
    //    }
    //}
   // cout << "Sum: " << sum << endl;
   // return 0;
//}


/*
    int sum() {
    int total = 0;
    for (int i = 1; i <= 100; i++) {
        if (i % 3 == 0 && i % 5 != 0) {
            total += i;
        }
    }
    return total;
   }

    int main() {
    cout << "The sum of numbers from 1 to 100 that are divisible by 3 but not by 5 is " << sum() << endl;
    return 0;
}
 */

  // 1-mashq

  //Sharti


   //1 dan 100 orasidagi berilgan ixtiyoriy sonni so’z ko’rinishida chiqaradigan
   //funksiya yordamida dastur tuzing. (100 bu oraliqga kirmaydi).
  // Masalan: 22 -> yigirma ikki, 30 -> o’ttiz


    //void sozKorinishidaChiqar(int n) {
   // string birliklar[] = {"", "bir", "ikki", "uch", "to'rt", "besh", "olti", "yetti", "sakkiz", "to'qqiz"};
   // string onliklar[] = {"", "o'n", "yigirma", "o'ttiz", "qirq", "ellik", "oltmish", "yetmish", "sakson"};

    //if (n < 10) {
    //    cout << birliklar[n];

    //} else if (n % 10 == 0) {
    //    cout << onliklar[n / 10];
    //} else {
    //    cout << onliklar[n / 10] << " " << birliklar[n % 10];
    //}
//}

   //int main() {
  //  int n;
   // cout << "Biror son kiriting: ";
   // cin >> n;

   // if (n < 1 || n > 99) {
   //     cout << "Noto'g'ri son!";
   //     return 0;
   // }

   // cout << n << " -> ";
   // sozKorinishidaChiqar(n);
//
   // return 0;
//}





